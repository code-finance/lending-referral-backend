schema {
  query: Query
  subscription: Subscription
}

"""
Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive.
"""
directive @entity on OBJECT

"""Defined a Subgraph ID for an object type"""
directive @subgraphId(id: String!) on OBJECT

"""
creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.
"""
directive @derivedFrom(field: String!) on FIELD_DEFINITION

enum Aggregation_interval {
  hour
  day
}

type AmpUpdate {
  id: ID!
  poolId: Pool!
  scheduledTimestamp: Int!
  startTimestamp: BigInt!
  endTimestamp: BigInt!
  startAmp: BigInt!
  endAmp: BigInt!
}

input AmpUpdate_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  poolId: String
  poolId_not: String
  poolId_gt: String
  poolId_lt: String
  poolId_gte: String
  poolId_lte: String
  poolId_in: [String!]
  poolId_not_in: [String!]
  poolId_contains: String
  poolId_contains_nocase: String
  poolId_not_contains: String
  poolId_not_contains_nocase: String
  poolId_starts_with: String
  poolId_starts_with_nocase: String
  poolId_not_starts_with: String
  poolId_not_starts_with_nocase: String
  poolId_ends_with: String
  poolId_ends_with_nocase: String
  poolId_not_ends_with: String
  poolId_not_ends_with_nocase: String
  poolId_: Pool_filter
  scheduledTimestamp: Int
  scheduledTimestamp_not: Int
  scheduledTimestamp_gt: Int
  scheduledTimestamp_lt: Int
  scheduledTimestamp_gte: Int
  scheduledTimestamp_lte: Int
  scheduledTimestamp_in: [Int!]
  scheduledTimestamp_not_in: [Int!]
  startTimestamp: BigInt
  startTimestamp_not: BigInt
  startTimestamp_gt: BigInt
  startTimestamp_lt: BigInt
  startTimestamp_gte: BigInt
  startTimestamp_lte: BigInt
  startTimestamp_in: [BigInt!]
  startTimestamp_not_in: [BigInt!]
  endTimestamp: BigInt
  endTimestamp_not: BigInt
  endTimestamp_gt: BigInt
  endTimestamp_lt: BigInt
  endTimestamp_gte: BigInt
  endTimestamp_lte: BigInt
  endTimestamp_in: [BigInt!]
  endTimestamp_not_in: [BigInt!]
  startAmp: BigInt
  startAmp_not: BigInt
  startAmp_gt: BigInt
  startAmp_lt: BigInt
  startAmp_gte: BigInt
  startAmp_lte: BigInt
  startAmp_in: [BigInt!]
  startAmp_not_in: [BigInt!]
  endAmp: BigInt
  endAmp_not: BigInt
  endAmp_gt: BigInt
  endAmp_lt: BigInt
  endAmp_gte: BigInt
  endAmp_lte: BigInt
  endAmp_in: [BigInt!]
  endAmp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [AmpUpdate_filter]
  or: [AmpUpdate_filter]
}

enum AmpUpdate_orderBy {
  id
  poolId
  poolId__id
  poolId__address
  poolId__poolType
  poolId__poolTypeVersion
  poolId__factory
  poolId__strategyType
  poolId__oracleEnabled
  poolId__symbol
  poolId__name
  poolId__swapEnabled
  poolId__swapEnabledInternal
  poolId__swapEnabledCurationSignal
  poolId__swapFee
  poolId__owner
  poolId__isPaused
  poolId__totalWeight
  poolId__totalSwapVolume
  poolId__totalSwapFee
  poolId__totalLiquidity
  poolId__totalLiquiditySansBPT
  poolId__totalShares
  poolId__totalProtocolFee
  poolId__createTime
  poolId__swapsCount
  poolId__holdersCount
  poolId__tx
  poolId__amp
  poolId__principalToken
  poolId__baseToken
  poolId__expiryTime
  poolId__unitSeconds
  poolId__managementFee
  poolId__joinExitEnabled
  poolId__mustAllowlistLPs
  poolId__managementAumFee
  poolId__totalAumFeeCollectedInBPT
  poolId__mainIndex
  poolId__wrappedIndex
  poolId__lowerTarget
  poolId__upperTarget
  poolId__sqrtAlpha
  poolId__sqrtBeta
  poolId__root3Alpha
  poolId__c
  poolId__s
  poolId__tauAlphaX
  poolId__tauAlphaY
  poolId__tauBetaX
  poolId__tauBetaY
  poolId__u
  poolId__v
  poolId__w
  poolId__z
  poolId__dSq
  poolId__alpha
  poolId__beta
  poolId__lambda
  poolId__delta
  poolId__epsilon
  poolId__isInRecoveryMode
  poolId__protocolSwapFeeCache
  poolId__protocolYieldFeeCache
  poolId__protocolAumFeeCache
  poolId__totalProtocolFeePaidInBPT
  poolId__lastJoinExitAmp
  poolId__lastPostJoinExitInvariant
  poolId__protocolId
  scheduledTimestamp
  startTimestamp
  endTimestamp
  startAmp
  endAmp
}

type Balancer {
  id: ID!
  poolCount: Int!
  pools(skip: Int = 0, first: Int = 100, orderBy: Pool_orderBy, orderDirection: OrderDirection, where: Pool_filter): [Pool!]
  snapshots(skip: Int = 0, first: Int = 100, orderBy: BalancerSnapshot_orderBy, orderDirection: OrderDirection, where: BalancerSnapshot_filter): [BalancerSnapshot!]
  totalLiquidity: BigDecimal!
  totalSwapCount: BigInt!
  totalSwapVolume: BigDecimal!
  totalSwapFee: BigDecimal!
  totalProtocolFee: BigDecimal
  protocolFeesCollector: Bytes
}

type BalancerSnapshot {
  id: ID!
  vault: Balancer!
  timestamp: Int!
  poolCount: Int!
  totalLiquidity: BigDecimal!
  totalSwapCount: BigInt!
  totalSwapVolume: BigDecimal!
  totalSwapFee: BigDecimal!
  totalProtocolFee: BigDecimal
}

input BalancerSnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  vault: String
  vault_not: String
  vault_gt: String
  vault_lt: String
  vault_gte: String
  vault_lte: String
  vault_in: [String!]
  vault_not_in: [String!]
  vault_contains: String
  vault_contains_nocase: String
  vault_not_contains: String
  vault_not_contains_nocase: String
  vault_starts_with: String
  vault_starts_with_nocase: String
  vault_not_starts_with: String
  vault_not_starts_with_nocase: String
  vault_ends_with: String
  vault_ends_with_nocase: String
  vault_not_ends_with: String
  vault_not_ends_with_nocase: String
  vault_: Balancer_filter
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  poolCount: Int
  poolCount_not: Int
  poolCount_gt: Int
  poolCount_lt: Int
  poolCount_gte: Int
  poolCount_lte: Int
  poolCount_in: [Int!]
  poolCount_not_in: [Int!]
  totalLiquidity: BigDecimal
  totalLiquidity_not: BigDecimal
  totalLiquidity_gt: BigDecimal
  totalLiquidity_lt: BigDecimal
  totalLiquidity_gte: BigDecimal
  totalLiquidity_lte: BigDecimal
  totalLiquidity_in: [BigDecimal!]
  totalLiquidity_not_in: [BigDecimal!]
  totalSwapCount: BigInt
  totalSwapCount_not: BigInt
  totalSwapCount_gt: BigInt
  totalSwapCount_lt: BigInt
  totalSwapCount_gte: BigInt
  totalSwapCount_lte: BigInt
  totalSwapCount_in: [BigInt!]
  totalSwapCount_not_in: [BigInt!]
  totalSwapVolume: BigDecimal
  totalSwapVolume_not: BigDecimal
  totalSwapVolume_gt: BigDecimal
  totalSwapVolume_lt: BigDecimal
  totalSwapVolume_gte: BigDecimal
  totalSwapVolume_lte: BigDecimal
  totalSwapVolume_in: [BigDecimal!]
  totalSwapVolume_not_in: [BigDecimal!]
  totalSwapFee: BigDecimal
  totalSwapFee_not: BigDecimal
  totalSwapFee_gt: BigDecimal
  totalSwapFee_lt: BigDecimal
  totalSwapFee_gte: BigDecimal
  totalSwapFee_lte: BigDecimal
  totalSwapFee_in: [BigDecimal!]
  totalSwapFee_not_in: [BigDecimal!]
  totalProtocolFee: BigDecimal
  totalProtocolFee_not: BigDecimal
  totalProtocolFee_gt: BigDecimal
  totalProtocolFee_lt: BigDecimal
  totalProtocolFee_gte: BigDecimal
  totalProtocolFee_lte: BigDecimal
  totalProtocolFee_in: [BigDecimal!]
  totalProtocolFee_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [BalancerSnapshot_filter]
  or: [BalancerSnapshot_filter]
}

enum BalancerSnapshot_orderBy {
  id
  vault
  vault__id
  vault__poolCount
  vault__totalLiquidity
  vault__totalSwapCount
  vault__totalSwapVolume
  vault__totalSwapFee
  vault__totalProtocolFee
  vault__protocolFeesCollector
  timestamp
  poolCount
  totalLiquidity
  totalSwapCount
  totalSwapVolume
  totalSwapFee
  totalProtocolFee
}

input Balancer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  poolCount: Int
  poolCount_not: Int
  poolCount_gt: Int
  poolCount_lt: Int
  poolCount_gte: Int
  poolCount_lte: Int
  poolCount_in: [Int!]
  poolCount_not_in: [Int!]
  pools_: Pool_filter
  snapshots_: BalancerSnapshot_filter
  totalLiquidity: BigDecimal
  totalLiquidity_not: BigDecimal
  totalLiquidity_gt: BigDecimal
  totalLiquidity_lt: BigDecimal
  totalLiquidity_gte: BigDecimal
  totalLiquidity_lte: BigDecimal
  totalLiquidity_in: [BigDecimal!]
  totalLiquidity_not_in: [BigDecimal!]
  totalSwapCount: BigInt
  totalSwapCount_not: BigInt
  totalSwapCount_gt: BigInt
  totalSwapCount_lt: BigInt
  totalSwapCount_gte: BigInt
  totalSwapCount_lte: BigInt
  totalSwapCount_in: [BigInt!]
  totalSwapCount_not_in: [BigInt!]
  totalSwapVolume: BigDecimal
  totalSwapVolume_not: BigDecimal
  totalSwapVolume_gt: BigDecimal
  totalSwapVolume_lt: BigDecimal
  totalSwapVolume_gte: BigDecimal
  totalSwapVolume_lte: BigDecimal
  totalSwapVolume_in: [BigDecimal!]
  totalSwapVolume_not_in: [BigDecimal!]
  totalSwapFee: BigDecimal
  totalSwapFee_not: BigDecimal
  totalSwapFee_gt: BigDecimal
  totalSwapFee_lt: BigDecimal
  totalSwapFee_gte: BigDecimal
  totalSwapFee_lte: BigDecimal
  totalSwapFee_in: [BigDecimal!]
  totalSwapFee_not_in: [BigDecimal!]
  totalProtocolFee: BigDecimal
  totalProtocolFee_not: BigDecimal
  totalProtocolFee_gt: BigDecimal
  totalProtocolFee_lt: BigDecimal
  totalProtocolFee_gte: BigDecimal
  totalProtocolFee_lte: BigDecimal
  totalProtocolFee_in: [BigDecimal!]
  totalProtocolFee_not_in: [BigDecimal!]
  protocolFeesCollector: Bytes
  protocolFeesCollector_not: Bytes
  protocolFeesCollector_gt: Bytes
  protocolFeesCollector_lt: Bytes
  protocolFeesCollector_gte: Bytes
  protocolFeesCollector_lte: Bytes
  protocolFeesCollector_in: [Bytes!]
  protocolFeesCollector_not_in: [Bytes!]
  protocolFeesCollector_contains: Bytes
  protocolFeesCollector_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Balancer_filter]
  or: [Balancer_filter]
}

enum Balancer_orderBy {
  id
  poolCount
  pools
  snapshots
  totalLiquidity
  totalSwapCount
  totalSwapVolume
  totalSwapFee
  totalProtocolFee
  protocolFeesCollector
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type CircuitBreaker {
  id: ID!
  pool: Pool!
  token: PoolToken!
  bptPrice: BigDecimal!
  lowerBoundPercentage: BigDecimal!
  upperBoundPercentage: BigDecimal!
}

input CircuitBreaker_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: PoolToken_filter
  bptPrice: BigDecimal
  bptPrice_not: BigDecimal
  bptPrice_gt: BigDecimal
  bptPrice_lt: BigDecimal
  bptPrice_gte: BigDecimal
  bptPrice_lte: BigDecimal
  bptPrice_in: [BigDecimal!]
  bptPrice_not_in: [BigDecimal!]
  lowerBoundPercentage: BigDecimal
  lowerBoundPercentage_not: BigDecimal
  lowerBoundPercentage_gt: BigDecimal
  lowerBoundPercentage_lt: BigDecimal
  lowerBoundPercentage_gte: BigDecimal
  lowerBoundPercentage_lte: BigDecimal
  lowerBoundPercentage_in: [BigDecimal!]
  lowerBoundPercentage_not_in: [BigDecimal!]
  upperBoundPercentage: BigDecimal
  upperBoundPercentage_not: BigDecimal
  upperBoundPercentage_gt: BigDecimal
  upperBoundPercentage_lt: BigDecimal
  upperBoundPercentage_gte: BigDecimal
  upperBoundPercentage_lte: BigDecimal
  upperBoundPercentage_in: [BigDecimal!]
  upperBoundPercentage_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [CircuitBreaker_filter]
  or: [CircuitBreaker_filter]
}

enum CircuitBreaker_orderBy {
  id
  pool
  pool__id
  pool__address
  pool__poolType
  pool__poolTypeVersion
  pool__factory
  pool__strategyType
  pool__oracleEnabled
  pool__symbol
  pool__name
  pool__swapEnabled
  pool__swapEnabledInternal
  pool__swapEnabledCurationSignal
  pool__swapFee
  pool__owner
  pool__isPaused
  pool__totalWeight
  pool__totalSwapVolume
  pool__totalSwapFee
  pool__totalLiquidity
  pool__totalLiquiditySansBPT
  pool__totalShares
  pool__totalProtocolFee
  pool__createTime
  pool__swapsCount
  pool__holdersCount
  pool__tx
  pool__amp
  pool__principalToken
  pool__baseToken
  pool__expiryTime
  pool__unitSeconds
  pool__managementFee
  pool__joinExitEnabled
  pool__mustAllowlistLPs
  pool__managementAumFee
  pool__totalAumFeeCollectedInBPT
  pool__mainIndex
  pool__wrappedIndex
  pool__lowerTarget
  pool__upperTarget
  pool__sqrtAlpha
  pool__sqrtBeta
  pool__root3Alpha
  pool__c
  pool__s
  pool__tauAlphaX
  pool__tauAlphaY
  pool__tauBetaX
  pool__tauBetaY
  pool__u
  pool__v
  pool__w
  pool__z
  pool__dSq
  pool__alpha
  pool__beta
  pool__lambda
  pool__delta
  pool__epsilon
  pool__isInRecoveryMode
  pool__protocolSwapFeeCache
  pool__protocolYieldFeeCache
  pool__protocolAumFeeCache
  pool__totalProtocolFeePaidInBPT
  pool__lastJoinExitAmp
  pool__lastPostJoinExitInvariant
  pool__protocolId
  token
  token__id
  token__assetManager
  token__symbol
  token__name
  token__decimals
  token__index
  token__address
  token__oldPriceRate
  token__priceRate
  token__balance
  token__paidProtocolFees
  token__cashBalance
  token__managedBalance
  token__weight
  token__isExemptFromYieldProtocolFee
  bptPrice
  lowerBoundPercentage
  upperBoundPercentage
}

type FXOracle {
  id: ID!
  tokens: [Bytes!]!
}

input FXOracle_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  tokens: [Bytes!]
  tokens_not: [Bytes!]
  tokens_contains: [Bytes!]
  tokens_contains_nocase: [Bytes!]
  tokens_not_contains: [Bytes!]
  tokens_not_contains_nocase: [Bytes!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [FXOracle_filter]
  or: [FXOracle_filter]
}

enum FXOracle_orderBy {
  id
  tokens
}

type GradualWeightUpdate {
  id: ID!
  poolId: Pool!
  scheduledTimestamp: Int!
  startTimestamp: BigInt!
  endTimestamp: BigInt!
  startWeights: [BigInt!]!
  endWeights: [BigInt!]!
}

input GradualWeightUpdate_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  poolId: String
  poolId_not: String
  poolId_gt: String
  poolId_lt: String
  poolId_gte: String
  poolId_lte: String
  poolId_in: [String!]
  poolId_not_in: [String!]
  poolId_contains: String
  poolId_contains_nocase: String
  poolId_not_contains: String
  poolId_not_contains_nocase: String
  poolId_starts_with: String
  poolId_starts_with_nocase: String
  poolId_not_starts_with: String
  poolId_not_starts_with_nocase: String
  poolId_ends_with: String
  poolId_ends_with_nocase: String
  poolId_not_ends_with: String
  poolId_not_ends_with_nocase: String
  poolId_: Pool_filter
  scheduledTimestamp: Int
  scheduledTimestamp_not: Int
  scheduledTimestamp_gt: Int
  scheduledTimestamp_lt: Int
  scheduledTimestamp_gte: Int
  scheduledTimestamp_lte: Int
  scheduledTimestamp_in: [Int!]
  scheduledTimestamp_not_in: [Int!]
  startTimestamp: BigInt
  startTimestamp_not: BigInt
  startTimestamp_gt: BigInt
  startTimestamp_lt: BigInt
  startTimestamp_gte: BigInt
  startTimestamp_lte: BigInt
  startTimestamp_in: [BigInt!]
  startTimestamp_not_in: [BigInt!]
  endTimestamp: BigInt
  endTimestamp_not: BigInt
  endTimestamp_gt: BigInt
  endTimestamp_lt: BigInt
  endTimestamp_gte: BigInt
  endTimestamp_lte: BigInt
  endTimestamp_in: [BigInt!]
  endTimestamp_not_in: [BigInt!]
  startWeights: [BigInt!]
  startWeights_not: [BigInt!]
  startWeights_contains: [BigInt!]
  startWeights_contains_nocase: [BigInt!]
  startWeights_not_contains: [BigInt!]
  startWeights_not_contains_nocase: [BigInt!]
  endWeights: [BigInt!]
  endWeights_not: [BigInt!]
  endWeights_contains: [BigInt!]
  endWeights_contains_nocase: [BigInt!]
  endWeights_not_contains: [BigInt!]
  endWeights_not_contains_nocase: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [GradualWeightUpdate_filter]
  or: [GradualWeightUpdate_filter]
}

enum GradualWeightUpdate_orderBy {
  id
  poolId
  poolId__id
  poolId__address
  poolId__poolType
  poolId__poolTypeVersion
  poolId__factory
  poolId__strategyType
  poolId__oracleEnabled
  poolId__symbol
  poolId__name
  poolId__swapEnabled
  poolId__swapEnabledInternal
  poolId__swapEnabledCurationSignal
  poolId__swapFee
  poolId__owner
  poolId__isPaused
  poolId__totalWeight
  poolId__totalSwapVolume
  poolId__totalSwapFee
  poolId__totalLiquidity
  poolId__totalLiquiditySansBPT
  poolId__totalShares
  poolId__totalProtocolFee
  poolId__createTime
  poolId__swapsCount
  poolId__holdersCount
  poolId__tx
  poolId__amp
  poolId__principalToken
  poolId__baseToken
  poolId__expiryTime
  poolId__unitSeconds
  poolId__managementFee
  poolId__joinExitEnabled
  poolId__mustAllowlistLPs
  poolId__managementAumFee
  poolId__totalAumFeeCollectedInBPT
  poolId__mainIndex
  poolId__wrappedIndex
  poolId__lowerTarget
  poolId__upperTarget
  poolId__sqrtAlpha
  poolId__sqrtBeta
  poolId__root3Alpha
  poolId__c
  poolId__s
  poolId__tauAlphaX
  poolId__tauAlphaY
  poolId__tauBetaX
  poolId__tauBetaY
  poolId__u
  poolId__v
  poolId__w
  poolId__z
  poolId__dSq
  poolId__alpha
  poolId__beta
  poolId__lambda
  poolId__delta
  poolId__epsilon
  poolId__isInRecoveryMode
  poolId__protocolSwapFeeCache
  poolId__protocolYieldFeeCache
  poolId__protocolAumFeeCache
  poolId__totalProtocolFeePaidInBPT
  poolId__lastJoinExitAmp
  poolId__lastPostJoinExitInvariant
  poolId__protocolId
  scheduledTimestamp
  startTimestamp
  endTimestamp
  startWeights
  endWeights
}

"""
8 bytes signed integer

"""
scalar Int8

enum InvestType {
  Join
  Exit
}

type JoinExit {
  id: ID!
  type: InvestType!
  sender: Bytes!
  amounts: [BigDecimal!]!
  valueUSD: BigDecimal
  pool: Pool!
  user: User!
  timestamp: Int!
  tx: Bytes!
  block: BigInt
}

input JoinExit_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  type: InvestType
  type_not: InvestType
  type_in: [InvestType!]
  type_not_in: [InvestType!]
  sender: Bytes
  sender_not: Bytes
  sender_gt: Bytes
  sender_lt: Bytes
  sender_gte: Bytes
  sender_lte: Bytes
  sender_in: [Bytes!]
  sender_not_in: [Bytes!]
  sender_contains: Bytes
  sender_not_contains: Bytes
  amounts: [BigDecimal!]
  amounts_not: [BigDecimal!]
  amounts_contains: [BigDecimal!]
  amounts_contains_nocase: [BigDecimal!]
  amounts_not_contains: [BigDecimal!]
  amounts_not_contains_nocase: [BigDecimal!]
  valueUSD: BigDecimal
  valueUSD_not: BigDecimal
  valueUSD_gt: BigDecimal
  valueUSD_lt: BigDecimal
  valueUSD_gte: BigDecimal
  valueUSD_lte: BigDecimal
  valueUSD_in: [BigDecimal!]
  valueUSD_not_in: [BigDecimal!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: User_filter
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  tx: Bytes
  tx_not: Bytes
  tx_gt: Bytes
  tx_lt: Bytes
  tx_gte: Bytes
  tx_lte: Bytes
  tx_in: [Bytes!]
  tx_not_in: [Bytes!]
  tx_contains: Bytes
  tx_not_contains: Bytes
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [JoinExit_filter]
  or: [JoinExit_filter]
}

enum JoinExit_orderBy {
  id
  type
  sender
  amounts
  valueUSD
  pool
  pool__id
  pool__address
  pool__poolType
  pool__poolTypeVersion
  pool__factory
  pool__strategyType
  pool__oracleEnabled
  pool__symbol
  pool__name
  pool__swapEnabled
  pool__swapEnabledInternal
  pool__swapEnabledCurationSignal
  pool__swapFee
  pool__owner
  pool__isPaused
  pool__totalWeight
  pool__totalSwapVolume
  pool__totalSwapFee
  pool__totalLiquidity
  pool__totalLiquiditySansBPT
  pool__totalShares
  pool__totalProtocolFee
  pool__createTime
  pool__swapsCount
  pool__holdersCount
  pool__tx
  pool__amp
  pool__principalToken
  pool__baseToken
  pool__expiryTime
  pool__unitSeconds
  pool__managementFee
  pool__joinExitEnabled
  pool__mustAllowlistLPs
  pool__managementAumFee
  pool__totalAumFeeCollectedInBPT
  pool__mainIndex
  pool__wrappedIndex
  pool__lowerTarget
  pool__upperTarget
  pool__sqrtAlpha
  pool__sqrtBeta
  pool__root3Alpha
  pool__c
  pool__s
  pool__tauAlphaX
  pool__tauAlphaY
  pool__tauBetaX
  pool__tauBetaY
  pool__u
  pool__v
  pool__w
  pool__z
  pool__dSq
  pool__alpha
  pool__beta
  pool__lambda
  pool__delta
  pool__epsilon
  pool__isInRecoveryMode
  pool__protocolSwapFeeCache
  pool__protocolYieldFeeCache
  pool__protocolAumFeeCache
  pool__totalProtocolFeePaidInBPT
  pool__lastJoinExitAmp
  pool__lastPostJoinExitInvariant
  pool__protocolId
  user
  user__id
  timestamp
  tx
  block
}

type LatestPrice {
  id: ID!
  asset: Bytes!
  pricingAsset: Bytes!
  poolId: Pool!
  price: BigDecimal!
  block: BigInt!
}

input LatestPrice_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  asset: Bytes
  asset_not: Bytes
  asset_gt: Bytes
  asset_lt: Bytes
  asset_gte: Bytes
  asset_lte: Bytes
  asset_in: [Bytes!]
  asset_not_in: [Bytes!]
  asset_contains: Bytes
  asset_not_contains: Bytes
  pricingAsset: Bytes
  pricingAsset_not: Bytes
  pricingAsset_gt: Bytes
  pricingAsset_lt: Bytes
  pricingAsset_gte: Bytes
  pricingAsset_lte: Bytes
  pricingAsset_in: [Bytes!]
  pricingAsset_not_in: [Bytes!]
  pricingAsset_contains: Bytes
  pricingAsset_not_contains: Bytes
  poolId: String
  poolId_not: String
  poolId_gt: String
  poolId_lt: String
  poolId_gte: String
  poolId_lte: String
  poolId_in: [String!]
  poolId_not_in: [String!]
  poolId_contains: String
  poolId_contains_nocase: String
  poolId_not_contains: String
  poolId_not_contains_nocase: String
  poolId_starts_with: String
  poolId_starts_with_nocase: String
  poolId_not_starts_with: String
  poolId_not_starts_with_nocase: String
  poolId_ends_with: String
  poolId_ends_with_nocase: String
  poolId_not_ends_with: String
  poolId_not_ends_with_nocase: String
  poolId_: Pool_filter
  price: BigDecimal
  price_not: BigDecimal
  price_gt: BigDecimal
  price_lt: BigDecimal
  price_gte: BigDecimal
  price_lte: BigDecimal
  price_in: [BigDecimal!]
  price_not_in: [BigDecimal!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [LatestPrice_filter]
  or: [LatestPrice_filter]
}

enum LatestPrice_orderBy {
  id
  asset
  pricingAsset
  poolId
  poolId__id
  poolId__address
  poolId__poolType
  poolId__poolTypeVersion
  poolId__factory
  poolId__strategyType
  poolId__oracleEnabled
  poolId__symbol
  poolId__name
  poolId__swapEnabled
  poolId__swapEnabledInternal
  poolId__swapEnabledCurationSignal
  poolId__swapFee
  poolId__owner
  poolId__isPaused
  poolId__totalWeight
  poolId__totalSwapVolume
  poolId__totalSwapFee
  poolId__totalLiquidity
  poolId__totalLiquiditySansBPT
  poolId__totalShares
  poolId__totalProtocolFee
  poolId__createTime
  poolId__swapsCount
  poolId__holdersCount
  poolId__tx
  poolId__amp
  poolId__principalToken
  poolId__baseToken
  poolId__expiryTime
  poolId__unitSeconds
  poolId__managementFee
  poolId__joinExitEnabled
  poolId__mustAllowlistLPs
  poolId__managementAumFee
  poolId__totalAumFeeCollectedInBPT
  poolId__mainIndex
  poolId__wrappedIndex
  poolId__lowerTarget
  poolId__upperTarget
  poolId__sqrtAlpha
  poolId__sqrtBeta
  poolId__root3Alpha
  poolId__c
  poolId__s
  poolId__tauAlphaX
  poolId__tauAlphaY
  poolId__tauBetaX
  poolId__tauBetaY
  poolId__u
  poolId__v
  poolId__w
  poolId__z
  poolId__dSq
  poolId__alpha
  poolId__beta
  poolId__lambda
  poolId__delta
  poolId__epsilon
  poolId__isInRecoveryMode
  poolId__protocolSwapFeeCache
  poolId__protocolYieldFeeCache
  poolId__protocolAumFeeCache
  poolId__totalProtocolFeePaidInBPT
  poolId__lastJoinExitAmp
  poolId__lastPostJoinExitInvariant
  poolId__protocolId
  price
  block
}

type ManagementOperation {
  id: ID!
  type: OperationType!
  cashDelta: BigDecimal!
  managedDelta: BigDecimal!
  poolTokenId: PoolToken!
  timestamp: Int!
}

input ManagementOperation_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  type: OperationType
  type_not: OperationType
  type_in: [OperationType!]
  type_not_in: [OperationType!]
  cashDelta: BigDecimal
  cashDelta_not: BigDecimal
  cashDelta_gt: BigDecimal
  cashDelta_lt: BigDecimal
  cashDelta_gte: BigDecimal
  cashDelta_lte: BigDecimal
  cashDelta_in: [BigDecimal!]
  cashDelta_not_in: [BigDecimal!]
  managedDelta: BigDecimal
  managedDelta_not: BigDecimal
  managedDelta_gt: BigDecimal
  managedDelta_lt: BigDecimal
  managedDelta_gte: BigDecimal
  managedDelta_lte: BigDecimal
  managedDelta_in: [BigDecimal!]
  managedDelta_not_in: [BigDecimal!]
  poolTokenId: String
  poolTokenId_not: String
  poolTokenId_gt: String
  poolTokenId_lt: String
  poolTokenId_gte: String
  poolTokenId_lte: String
  poolTokenId_in: [String!]
  poolTokenId_not_in: [String!]
  poolTokenId_contains: String
  poolTokenId_contains_nocase: String
  poolTokenId_not_contains: String
  poolTokenId_not_contains_nocase: String
  poolTokenId_starts_with: String
  poolTokenId_starts_with_nocase: String
  poolTokenId_not_starts_with: String
  poolTokenId_not_starts_with_nocase: String
  poolTokenId_ends_with: String
  poolTokenId_ends_with_nocase: String
  poolTokenId_not_ends_with: String
  poolTokenId_not_ends_with_nocase: String
  poolTokenId_: PoolToken_filter
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ManagementOperation_filter]
  or: [ManagementOperation_filter]
}

enum ManagementOperation_orderBy {
  id
  type
  cashDelta
  managedDelta
  poolTokenId
  poolTokenId__id
  poolTokenId__assetManager
  poolTokenId__symbol
  poolTokenId__name
  poolTokenId__decimals
  poolTokenId__index
  poolTokenId__address
  poolTokenId__oldPriceRate
  poolTokenId__priceRate
  poolTokenId__balance
  poolTokenId__paidProtocolFees
  poolTokenId__cashBalance
  poolTokenId__managedBalance
  poolTokenId__weight
  poolTokenId__isExemptFromYieldProtocolFee
  timestamp
}

enum OperationType {
  Deposit
  Withdraw
  Update
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Pool {
  id: ID!
  address: Bytes!
  poolType: String
  poolTypeVersion: Int
  factory: Bytes
  strategyType: Int!
  oracleEnabled: Boolean!
  symbol: String
  name: String
  """
  Indicates if a pool can be swapped against. Combines multiple sources, including offchain curation
  """
  swapEnabled: Boolean!
  """
  The native swapEnabled boolean. internal to the pool. Only applies to Gyro, LBPs and InvestmentPools
  """
  swapEnabledInternal: Boolean
  """External indication from an offchain permissioned actor"""
  swapEnabledCurationSignal: Boolean
  swapFee: BigDecimal!
  owner: Bytes
  isPaused: Boolean
  totalWeight: BigDecimal
  totalSwapVolume: BigDecimal!
  totalSwapFee: BigDecimal!
  totalLiquidity: BigDecimal!
  totalLiquiditySansBPT: BigDecimal
  totalShares: BigDecimal!
  totalProtocolFee: BigDecimal
  createTime: Int!
  swapsCount: BigInt!
  holdersCount: BigInt!
  vaultID: Balancer!
  tx: Bytes
  tokensList: [Bytes!]!
  tokens(skip: Int = 0, first: Int = 100, orderBy: PoolToken_orderBy, orderDirection: OrderDirection, where: PoolToken_filter): [PoolToken!]
  joinsExits(skip: Int = 0, first: Int = 100, orderBy: JoinExit_orderBy, orderDirection: OrderDirection, where: JoinExit_filter): [JoinExit!]
  swaps(skip: Int = 0, first: Int = 100, orderBy: Swap_orderBy, orderDirection: OrderDirection, where: Swap_filter): [Swap!]
  shares(skip: Int = 0, first: Int = 100, orderBy: PoolShare_orderBy, orderDirection: OrderDirection, where: PoolShare_filter): [PoolShare!]
  snapshots(skip: Int = 0, first: Int = 100, orderBy: PoolSnapshot_orderBy, orderDirection: OrderDirection, where: PoolSnapshot_filter): [PoolSnapshot!]
  historicalValues(skip: Int = 0, first: Int = 100, orderBy: PoolHistoricalLiquidity_orderBy, orderDirection: OrderDirection, where: PoolHistoricalLiquidity_filter): [PoolHistoricalLiquidity!]
  weightUpdates(skip: Int = 0, first: Int = 100, orderBy: GradualWeightUpdate_orderBy, orderDirection: OrderDirection, where: GradualWeightUpdate_filter): [GradualWeightUpdate!]
  amp: BigInt
  latestAmpUpdate: AmpUpdate
  ampUpdates(skip: Int = 0, first: Int = 100, orderBy: AmpUpdate_orderBy, orderDirection: OrderDirection, where: AmpUpdate_filter): [AmpUpdate!]
  priceRateProviders(skip: Int = 0, first: Int = 100, orderBy: PriceRateProvider_orderBy, orderDirection: OrderDirection, where: PriceRateProvider_filter): [PriceRateProvider!]
  principalToken: Bytes
  baseToken: Bytes
  expiryTime: BigInt
  unitSeconds: BigInt
  managementFee: BigDecimal
  joinExitEnabled: Boolean
  mustAllowlistLPs: Boolean
  managementAumFee: BigDecimal
  totalAumFeeCollectedInBPT: BigDecimal
  circuitBreakers(skip: Int = 0, first: Int = 100, orderBy: CircuitBreaker_orderBy, orderDirection: OrderDirection, where: CircuitBreaker_filter): [CircuitBreaker!]
  mainIndex: Int
  wrappedIndex: Int
  lowerTarget: BigDecimal
  upperTarget: BigDecimal
  sqrtAlpha: BigDecimal
  sqrtBeta: BigDecimal
  root3Alpha: BigDecimal
  c: BigDecimal
  s: BigDecimal
  tauAlphaX: BigDecimal
  tauAlphaY: BigDecimal
  tauBetaX: BigDecimal
  tauBetaY: BigDecimal
  u: BigDecimal
  v: BigDecimal
  w: BigDecimal
  z: BigDecimal
  dSq: BigDecimal
  alpha: BigDecimal
  beta: BigDecimal
  lambda: BigDecimal
  delta: BigDecimal
  epsilon: BigDecimal
  isInRecoveryMode: Boolean
  protocolSwapFeeCache: BigDecimal
  protocolYieldFeeCache: BigDecimal
  protocolAumFeeCache: BigDecimal
  totalProtocolFeePaidInBPT: BigDecimal
  lastJoinExitAmp: BigInt
  lastPostJoinExitInvariant: BigDecimal
  protocolId: Int
  protocolIdData: ProtocolIdData
}

type PoolContract {
  id: ID!
  pool: Pool!
}

input PoolContract_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PoolContract_filter]
  or: [PoolContract_filter]
}

enum PoolContract_orderBy {
  id
  pool
  pool__id
  pool__address
  pool__poolType
  pool__poolTypeVersion
  pool__factory
  pool__strategyType
  pool__oracleEnabled
  pool__symbol
  pool__name
  pool__swapEnabled
  pool__swapEnabledInternal
  pool__swapEnabledCurationSignal
  pool__swapFee
  pool__owner
  pool__isPaused
  pool__totalWeight
  pool__totalSwapVolume
  pool__totalSwapFee
  pool__totalLiquidity
  pool__totalLiquiditySansBPT
  pool__totalShares
  pool__totalProtocolFee
  pool__createTime
  pool__swapsCount
  pool__holdersCount
  pool__tx
  pool__amp
  pool__principalToken
  pool__baseToken
  pool__expiryTime
  pool__unitSeconds
  pool__managementFee
  pool__joinExitEnabled
  pool__mustAllowlistLPs
  pool__managementAumFee
  pool__totalAumFeeCollectedInBPT
  pool__mainIndex
  pool__wrappedIndex
  pool__lowerTarget
  pool__upperTarget
  pool__sqrtAlpha
  pool__sqrtBeta
  pool__root3Alpha
  pool__c
  pool__s
  pool__tauAlphaX
  pool__tauAlphaY
  pool__tauBetaX
  pool__tauBetaY
  pool__u
  pool__v
  pool__w
  pool__z
  pool__dSq
  pool__alpha
  pool__beta
  pool__lambda
  pool__delta
  pool__epsilon
  pool__isInRecoveryMode
  pool__protocolSwapFeeCache
  pool__protocolYieldFeeCache
  pool__protocolAumFeeCache
  pool__totalProtocolFeePaidInBPT
  pool__lastJoinExitAmp
  pool__lastPostJoinExitInvariant
  pool__protocolId
}

type PoolHistoricalLiquidity {
  id: ID!
  poolId: Pool!
  poolTotalShares: BigDecimal!
  poolLiquidity: BigDecimal!
  poolShareValue: BigDecimal!
  pricingAsset: Bytes!
  block: BigInt!
}

input PoolHistoricalLiquidity_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  poolId: String
  poolId_not: String
  poolId_gt: String
  poolId_lt: String
  poolId_gte: String
  poolId_lte: String
  poolId_in: [String!]
  poolId_not_in: [String!]
  poolId_contains: String
  poolId_contains_nocase: String
  poolId_not_contains: String
  poolId_not_contains_nocase: String
  poolId_starts_with: String
  poolId_starts_with_nocase: String
  poolId_not_starts_with: String
  poolId_not_starts_with_nocase: String
  poolId_ends_with: String
  poolId_ends_with_nocase: String
  poolId_not_ends_with: String
  poolId_not_ends_with_nocase: String
  poolId_: Pool_filter
  poolTotalShares: BigDecimal
  poolTotalShares_not: BigDecimal
  poolTotalShares_gt: BigDecimal
  poolTotalShares_lt: BigDecimal
  poolTotalShares_gte: BigDecimal
  poolTotalShares_lte: BigDecimal
  poolTotalShares_in: [BigDecimal!]
  poolTotalShares_not_in: [BigDecimal!]
  poolLiquidity: BigDecimal
  poolLiquidity_not: BigDecimal
  poolLiquidity_gt: BigDecimal
  poolLiquidity_lt: BigDecimal
  poolLiquidity_gte: BigDecimal
  poolLiquidity_lte: BigDecimal
  poolLiquidity_in: [BigDecimal!]
  poolLiquidity_not_in: [BigDecimal!]
  poolShareValue: BigDecimal
  poolShareValue_not: BigDecimal
  poolShareValue_gt: BigDecimal
  poolShareValue_lt: BigDecimal
  poolShareValue_gte: BigDecimal
  poolShareValue_lte: BigDecimal
  poolShareValue_in: [BigDecimal!]
  poolShareValue_not_in: [BigDecimal!]
  pricingAsset: Bytes
  pricingAsset_not: Bytes
  pricingAsset_gt: Bytes
  pricingAsset_lt: Bytes
  pricingAsset_gte: Bytes
  pricingAsset_lte: Bytes
  pricingAsset_in: [Bytes!]
  pricingAsset_not_in: [Bytes!]
  pricingAsset_contains: Bytes
  pricingAsset_not_contains: Bytes
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PoolHistoricalLiquidity_filter]
  or: [PoolHistoricalLiquidity_filter]
}

enum PoolHistoricalLiquidity_orderBy {
  id
  poolId
  poolId__id
  poolId__address
  poolId__poolType
  poolId__poolTypeVersion
  poolId__factory
  poolId__strategyType
  poolId__oracleEnabled
  poolId__symbol
  poolId__name
  poolId__swapEnabled
  poolId__swapEnabledInternal
  poolId__swapEnabledCurationSignal
  poolId__swapFee
  poolId__owner
  poolId__isPaused
  poolId__totalWeight
  poolId__totalSwapVolume
  poolId__totalSwapFee
  poolId__totalLiquidity
  poolId__totalLiquiditySansBPT
  poolId__totalShares
  poolId__totalProtocolFee
  poolId__createTime
  poolId__swapsCount
  poolId__holdersCount
  poolId__tx
  poolId__amp
  poolId__principalToken
  poolId__baseToken
  poolId__expiryTime
  poolId__unitSeconds
  poolId__managementFee
  poolId__joinExitEnabled
  poolId__mustAllowlistLPs
  poolId__managementAumFee
  poolId__totalAumFeeCollectedInBPT
  poolId__mainIndex
  poolId__wrappedIndex
  poolId__lowerTarget
  poolId__upperTarget
  poolId__sqrtAlpha
  poolId__sqrtBeta
  poolId__root3Alpha
  poolId__c
  poolId__s
  poolId__tauAlphaX
  poolId__tauAlphaY
  poolId__tauBetaX
  poolId__tauBetaY
  poolId__u
  poolId__v
  poolId__w
  poolId__z
  poolId__dSq
  poolId__alpha
  poolId__beta
  poolId__lambda
  poolId__delta
  poolId__epsilon
  poolId__isInRecoveryMode
  poolId__protocolSwapFeeCache
  poolId__protocolYieldFeeCache
  poolId__protocolAumFeeCache
  poolId__totalProtocolFeePaidInBPT
  poolId__lastJoinExitAmp
  poolId__lastPostJoinExitInvariant
  poolId__protocolId
  poolTotalShares
  poolLiquidity
  poolShareValue
  pricingAsset
  block
}

type PoolShare {
  id: ID!
  userAddress: User!
  poolId: Pool!
  balance: BigDecimal!
}

input PoolShare_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  userAddress: String
  userAddress_not: String
  userAddress_gt: String
  userAddress_lt: String
  userAddress_gte: String
  userAddress_lte: String
  userAddress_in: [String!]
  userAddress_not_in: [String!]
  userAddress_contains: String
  userAddress_contains_nocase: String
  userAddress_not_contains: String
  userAddress_not_contains_nocase: String
  userAddress_starts_with: String
  userAddress_starts_with_nocase: String
  userAddress_not_starts_with: String
  userAddress_not_starts_with_nocase: String
  userAddress_ends_with: String
  userAddress_ends_with_nocase: String
  userAddress_not_ends_with: String
  userAddress_not_ends_with_nocase: String
  userAddress_: User_filter
  poolId: String
  poolId_not: String
  poolId_gt: String
  poolId_lt: String
  poolId_gte: String
  poolId_lte: String
  poolId_in: [String!]
  poolId_not_in: [String!]
  poolId_contains: String
  poolId_contains_nocase: String
  poolId_not_contains: String
  poolId_not_contains_nocase: String
  poolId_starts_with: String
  poolId_starts_with_nocase: String
  poolId_not_starts_with: String
  poolId_not_starts_with_nocase: String
  poolId_ends_with: String
  poolId_ends_with_nocase: String
  poolId_not_ends_with: String
  poolId_not_ends_with_nocase: String
  poolId_: Pool_filter
  balance: BigDecimal
  balance_not: BigDecimal
  balance_gt: BigDecimal
  balance_lt: BigDecimal
  balance_gte: BigDecimal
  balance_lte: BigDecimal
  balance_in: [BigDecimal!]
  balance_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PoolShare_filter]
  or: [PoolShare_filter]
}

enum PoolShare_orderBy {
  id
  userAddress
  userAddress__id
  poolId
  poolId__id
  poolId__address
  poolId__poolType
  poolId__poolTypeVersion
  poolId__factory
  poolId__strategyType
  poolId__oracleEnabled
  poolId__symbol
  poolId__name
  poolId__swapEnabled
  poolId__swapEnabledInternal
  poolId__swapEnabledCurationSignal
  poolId__swapFee
  poolId__owner
  poolId__isPaused
  poolId__totalWeight
  poolId__totalSwapVolume
  poolId__totalSwapFee
  poolId__totalLiquidity
  poolId__totalLiquiditySansBPT
  poolId__totalShares
  poolId__totalProtocolFee
  poolId__createTime
  poolId__swapsCount
  poolId__holdersCount
  poolId__tx
  poolId__amp
  poolId__principalToken
  poolId__baseToken
  poolId__expiryTime
  poolId__unitSeconds
  poolId__managementFee
  poolId__joinExitEnabled
  poolId__mustAllowlistLPs
  poolId__managementAumFee
  poolId__totalAumFeeCollectedInBPT
  poolId__mainIndex
  poolId__wrappedIndex
  poolId__lowerTarget
  poolId__upperTarget
  poolId__sqrtAlpha
  poolId__sqrtBeta
  poolId__root3Alpha
  poolId__c
  poolId__s
  poolId__tauAlphaX
  poolId__tauAlphaY
  poolId__tauBetaX
  poolId__tauBetaY
  poolId__u
  poolId__v
  poolId__w
  poolId__z
  poolId__dSq
  poolId__alpha
  poolId__beta
  poolId__lambda
  poolId__delta
  poolId__epsilon
  poolId__isInRecoveryMode
  poolId__protocolSwapFeeCache
  poolId__protocolYieldFeeCache
  poolId__protocolAumFeeCache
  poolId__totalProtocolFeePaidInBPT
  poolId__lastJoinExitAmp
  poolId__lastPostJoinExitInvariant
  poolId__protocolId
  balance
}

type PoolSnapshot {
  id: ID!
  pool: Pool!
  amounts: [BigDecimal!]!
  totalShares: BigDecimal!
  swapVolume: BigDecimal!
  protocolFee: BigDecimal
  swapFees: BigDecimal!
  liquidity: BigDecimal!
  swapsCount: BigInt!
  holdersCount: BigInt!
  timestamp: Int!
}

input PoolSnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  amounts: [BigDecimal!]
  amounts_not: [BigDecimal!]
  amounts_contains: [BigDecimal!]
  amounts_contains_nocase: [BigDecimal!]
  amounts_not_contains: [BigDecimal!]
  amounts_not_contains_nocase: [BigDecimal!]
  totalShares: BigDecimal
  totalShares_not: BigDecimal
  totalShares_gt: BigDecimal
  totalShares_lt: BigDecimal
  totalShares_gte: BigDecimal
  totalShares_lte: BigDecimal
  totalShares_in: [BigDecimal!]
  totalShares_not_in: [BigDecimal!]
  swapVolume: BigDecimal
  swapVolume_not: BigDecimal
  swapVolume_gt: BigDecimal
  swapVolume_lt: BigDecimal
  swapVolume_gte: BigDecimal
  swapVolume_lte: BigDecimal
  swapVolume_in: [BigDecimal!]
  swapVolume_not_in: [BigDecimal!]
  protocolFee: BigDecimal
  protocolFee_not: BigDecimal
  protocolFee_gt: BigDecimal
  protocolFee_lt: BigDecimal
  protocolFee_gte: BigDecimal
  protocolFee_lte: BigDecimal
  protocolFee_in: [BigDecimal!]
  protocolFee_not_in: [BigDecimal!]
  swapFees: BigDecimal
  swapFees_not: BigDecimal
  swapFees_gt: BigDecimal
  swapFees_lt: BigDecimal
  swapFees_gte: BigDecimal
  swapFees_lte: BigDecimal
  swapFees_in: [BigDecimal!]
  swapFees_not_in: [BigDecimal!]
  liquidity: BigDecimal
  liquidity_not: BigDecimal
  liquidity_gt: BigDecimal
  liquidity_lt: BigDecimal
  liquidity_gte: BigDecimal
  liquidity_lte: BigDecimal
  liquidity_in: [BigDecimal!]
  liquidity_not_in: [BigDecimal!]
  swapsCount: BigInt
  swapsCount_not: BigInt
  swapsCount_gt: BigInt
  swapsCount_lt: BigInt
  swapsCount_gte: BigInt
  swapsCount_lte: BigInt
  swapsCount_in: [BigInt!]
  swapsCount_not_in: [BigInt!]
  holdersCount: BigInt
  holdersCount_not: BigInt
  holdersCount_gt: BigInt
  holdersCount_lt: BigInt
  holdersCount_gte: BigInt
  holdersCount_lte: BigInt
  holdersCount_in: [BigInt!]
  holdersCount_not_in: [BigInt!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PoolSnapshot_filter]
  or: [PoolSnapshot_filter]
}

enum PoolSnapshot_orderBy {
  id
  pool
  pool__id
  pool__address
  pool__poolType
  pool__poolTypeVersion
  pool__factory
  pool__strategyType
  pool__oracleEnabled
  pool__symbol
  pool__name
  pool__swapEnabled
  pool__swapEnabledInternal
  pool__swapEnabledCurationSignal
  pool__swapFee
  pool__owner
  pool__isPaused
  pool__totalWeight
  pool__totalSwapVolume
  pool__totalSwapFee
  pool__totalLiquidity
  pool__totalLiquiditySansBPT
  pool__totalShares
  pool__totalProtocolFee
  pool__createTime
  pool__swapsCount
  pool__holdersCount
  pool__tx
  pool__amp
  pool__principalToken
  pool__baseToken
  pool__expiryTime
  pool__unitSeconds
  pool__managementFee
  pool__joinExitEnabled
  pool__mustAllowlistLPs
  pool__managementAumFee
  pool__totalAumFeeCollectedInBPT
  pool__mainIndex
  pool__wrappedIndex
  pool__lowerTarget
  pool__upperTarget
  pool__sqrtAlpha
  pool__sqrtBeta
  pool__root3Alpha
  pool__c
  pool__s
  pool__tauAlphaX
  pool__tauAlphaY
  pool__tauBetaX
  pool__tauBetaY
  pool__u
  pool__v
  pool__w
  pool__z
  pool__dSq
  pool__alpha
  pool__beta
  pool__lambda
  pool__delta
  pool__epsilon
  pool__isInRecoveryMode
  pool__protocolSwapFeeCache
  pool__protocolYieldFeeCache
  pool__protocolAumFeeCache
  pool__totalProtocolFeePaidInBPT
  pool__lastJoinExitAmp
  pool__lastPostJoinExitInvariant
  pool__protocolId
  amounts
  totalShares
  swapVolume
  protocolFee
  swapFees
  liquidity
  swapsCount
  holdersCount
  timestamp
}

type PoolToken {
  id: ID!
  poolId: Pool
  token: Token!
  assetManager: Bytes!
  symbol: String!
  name: String!
  decimals: Int!
  index: Int
  address: String!
  oldPriceRate: BigDecimal
  priceRate: BigDecimal!
  balance: BigDecimal!
  paidProtocolFees: BigDecimal
  cashBalance: BigDecimal!
  managedBalance: BigDecimal!
  managements(skip: Int = 0, first: Int = 100, orderBy: ManagementOperation_orderBy, orderDirection: OrderDirection, where: ManagementOperation_filter): [ManagementOperation!]
  weight: BigDecimal
  isExemptFromYieldProtocolFee: Boolean
  circuitBreaker: CircuitBreaker
}

input PoolToken_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  poolId: String
  poolId_not: String
  poolId_gt: String
  poolId_lt: String
  poolId_gte: String
  poolId_lte: String
  poolId_in: [String!]
  poolId_not_in: [String!]
  poolId_contains: String
  poolId_contains_nocase: String
  poolId_not_contains: String
  poolId_not_contains_nocase: String
  poolId_starts_with: String
  poolId_starts_with_nocase: String
  poolId_not_starts_with: String
  poolId_not_starts_with_nocase: String
  poolId_ends_with: String
  poolId_ends_with_nocase: String
  poolId_not_ends_with: String
  poolId_not_ends_with_nocase: String
  poolId_: Pool_filter
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  assetManager: Bytes
  assetManager_not: Bytes
  assetManager_gt: Bytes
  assetManager_lt: Bytes
  assetManager_gte: Bytes
  assetManager_lte: Bytes
  assetManager_in: [Bytes!]
  assetManager_not_in: [Bytes!]
  assetManager_contains: Bytes
  assetManager_not_contains: Bytes
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  decimals: Int
  decimals_not: Int
  decimals_gt: Int
  decimals_lt: Int
  decimals_gte: Int
  decimals_lte: Int
  decimals_in: [Int!]
  decimals_not_in: [Int!]
  index: Int
  index_not: Int
  index_gt: Int
  index_lt: Int
  index_gte: Int
  index_lte: Int
  index_in: [Int!]
  index_not_in: [Int!]
  address: String
  address_not: String
  address_gt: String
  address_lt: String
  address_gte: String
  address_lte: String
  address_in: [String!]
  address_not_in: [String!]
  address_contains: String
  address_contains_nocase: String
  address_not_contains: String
  address_not_contains_nocase: String
  address_starts_with: String
  address_starts_with_nocase: String
  address_not_starts_with: String
  address_not_starts_with_nocase: String
  address_ends_with: String
  address_ends_with_nocase: String
  address_not_ends_with: String
  address_not_ends_with_nocase: String
  oldPriceRate: BigDecimal
  oldPriceRate_not: BigDecimal
  oldPriceRate_gt: BigDecimal
  oldPriceRate_lt: BigDecimal
  oldPriceRate_gte: BigDecimal
  oldPriceRate_lte: BigDecimal
  oldPriceRate_in: [BigDecimal!]
  oldPriceRate_not_in: [BigDecimal!]
  priceRate: BigDecimal
  priceRate_not: BigDecimal
  priceRate_gt: BigDecimal
  priceRate_lt: BigDecimal
  priceRate_gte: BigDecimal
  priceRate_lte: BigDecimal
  priceRate_in: [BigDecimal!]
  priceRate_not_in: [BigDecimal!]
  balance: BigDecimal
  balance_not: BigDecimal
  balance_gt: BigDecimal
  balance_lt: BigDecimal
  balance_gte: BigDecimal
  balance_lte: BigDecimal
  balance_in: [BigDecimal!]
  balance_not_in: [BigDecimal!]
  paidProtocolFees: BigDecimal
  paidProtocolFees_not: BigDecimal
  paidProtocolFees_gt: BigDecimal
  paidProtocolFees_lt: BigDecimal
  paidProtocolFees_gte: BigDecimal
  paidProtocolFees_lte: BigDecimal
  paidProtocolFees_in: [BigDecimal!]
  paidProtocolFees_not_in: [BigDecimal!]
  cashBalance: BigDecimal
  cashBalance_not: BigDecimal
  cashBalance_gt: BigDecimal
  cashBalance_lt: BigDecimal
  cashBalance_gte: BigDecimal
  cashBalance_lte: BigDecimal
  cashBalance_in: [BigDecimal!]
  cashBalance_not_in: [BigDecimal!]
  managedBalance: BigDecimal
  managedBalance_not: BigDecimal
  managedBalance_gt: BigDecimal
  managedBalance_lt: BigDecimal
  managedBalance_gte: BigDecimal
  managedBalance_lte: BigDecimal
  managedBalance_in: [BigDecimal!]
  managedBalance_not_in: [BigDecimal!]
  managements_: ManagementOperation_filter
  weight: BigDecimal
  weight_not: BigDecimal
  weight_gt: BigDecimal
  weight_lt: BigDecimal
  weight_gte: BigDecimal
  weight_lte: BigDecimal
  weight_in: [BigDecimal!]
  weight_not_in: [BigDecimal!]
  isExemptFromYieldProtocolFee: Boolean
  isExemptFromYieldProtocolFee_not: Boolean
  isExemptFromYieldProtocolFee_in: [Boolean!]
  isExemptFromYieldProtocolFee_not_in: [Boolean!]
  circuitBreaker: String
  circuitBreaker_not: String
  circuitBreaker_gt: String
  circuitBreaker_lt: String
  circuitBreaker_gte: String
  circuitBreaker_lte: String
  circuitBreaker_in: [String!]
  circuitBreaker_not_in: [String!]
  circuitBreaker_contains: String
  circuitBreaker_contains_nocase: String
  circuitBreaker_not_contains: String
  circuitBreaker_not_contains_nocase: String
  circuitBreaker_starts_with: String
  circuitBreaker_starts_with_nocase: String
  circuitBreaker_not_starts_with: String
  circuitBreaker_not_starts_with_nocase: String
  circuitBreaker_ends_with: String
  circuitBreaker_ends_with_nocase: String
  circuitBreaker_not_ends_with: String
  circuitBreaker_not_ends_with_nocase: String
  circuitBreaker_: CircuitBreaker_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PoolToken_filter]
  or: [PoolToken_filter]
}

enum PoolToken_orderBy {
  id
  poolId
  poolId__id
  poolId__address
  poolId__poolType
  poolId__poolTypeVersion
  poolId__factory
  poolId__strategyType
  poolId__oracleEnabled
  poolId__symbol
  poolId__name
  poolId__swapEnabled
  poolId__swapEnabledInternal
  poolId__swapEnabledCurationSignal
  poolId__swapFee
  poolId__owner
  poolId__isPaused
  poolId__totalWeight
  poolId__totalSwapVolume
  poolId__totalSwapFee
  poolId__totalLiquidity
  poolId__totalLiquiditySansBPT
  poolId__totalShares
  poolId__totalProtocolFee
  poolId__createTime
  poolId__swapsCount
  poolId__holdersCount
  poolId__tx
  poolId__amp
  poolId__principalToken
  poolId__baseToken
  poolId__expiryTime
  poolId__unitSeconds
  poolId__managementFee
  poolId__joinExitEnabled
  poolId__mustAllowlistLPs
  poolId__managementAumFee
  poolId__totalAumFeeCollectedInBPT
  poolId__mainIndex
  poolId__wrappedIndex
  poolId__lowerTarget
  poolId__upperTarget
  poolId__sqrtAlpha
  poolId__sqrtBeta
  poolId__root3Alpha
  poolId__c
  poolId__s
  poolId__tauAlphaX
  poolId__tauAlphaY
  poolId__tauBetaX
  poolId__tauBetaY
  poolId__u
  poolId__v
  poolId__w
  poolId__z
  poolId__dSq
  poolId__alpha
  poolId__beta
  poolId__lambda
  poolId__delta
  poolId__epsilon
  poolId__isInRecoveryMode
  poolId__protocolSwapFeeCache
  poolId__protocolYieldFeeCache
  poolId__protocolAumFeeCache
  poolId__totalProtocolFeePaidInBPT
  poolId__lastJoinExitAmp
  poolId__lastPostJoinExitInvariant
  poolId__protocolId
  token
  token__id
  token__symbol
  token__name
  token__decimals
  token__address
  token__totalBalanceUSD
  token__totalBalanceNotional
  token__totalVolumeUSD
  token__totalVolumeNotional
  token__totalSwapCount
  token__latestUSDPrice
  token__latestUSDPriceTimestamp
  token__latestFXPrice
  token__fxOracleDecimals
  assetManager
  symbol
  name
  decimals
  index
  address
  oldPriceRate
  priceRate
  balance
  paidProtocolFees
  cashBalance
  managedBalance
  managements
  weight
  isExemptFromYieldProtocolFee
  circuitBreaker
  circuitBreaker__id
  circuitBreaker__bptPrice
  circuitBreaker__lowerBoundPercentage
  circuitBreaker__upperBoundPercentage
}

input Pool_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  address: Bytes
  address_not: Bytes
  address_gt: Bytes
  address_lt: Bytes
  address_gte: Bytes
  address_lte: Bytes
  address_in: [Bytes!]
  address_not_in: [Bytes!]
  address_contains: Bytes
  address_not_contains: Bytes
  poolType: String
  poolType_not: String
  poolType_gt: String
  poolType_lt: String
  poolType_gte: String
  poolType_lte: String
  poolType_in: [String!]
  poolType_not_in: [String!]
  poolType_contains: String
  poolType_contains_nocase: String
  poolType_not_contains: String
  poolType_not_contains_nocase: String
  poolType_starts_with: String
  poolType_starts_with_nocase: String
  poolType_not_starts_with: String
  poolType_not_starts_with_nocase: String
  poolType_ends_with: String
  poolType_ends_with_nocase: String
  poolType_not_ends_with: String
  poolType_not_ends_with_nocase: String
  poolTypeVersion: Int
  poolTypeVersion_not: Int
  poolTypeVersion_gt: Int
  poolTypeVersion_lt: Int
  poolTypeVersion_gte: Int
  poolTypeVersion_lte: Int
  poolTypeVersion_in: [Int!]
  poolTypeVersion_not_in: [Int!]
  factory: Bytes
  factory_not: Bytes
  factory_gt: Bytes
  factory_lt: Bytes
  factory_gte: Bytes
  factory_lte: Bytes
  factory_in: [Bytes!]
  factory_not_in: [Bytes!]
  factory_contains: Bytes
  factory_not_contains: Bytes
  strategyType: Int
  strategyType_not: Int
  strategyType_gt: Int
  strategyType_lt: Int
  strategyType_gte: Int
  strategyType_lte: Int
  strategyType_in: [Int!]
  strategyType_not_in: [Int!]
  oracleEnabled: Boolean
  oracleEnabled_not: Boolean
  oracleEnabled_in: [Boolean!]
  oracleEnabled_not_in: [Boolean!]
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  swapEnabled: Boolean
  swapEnabled_not: Boolean
  swapEnabled_in: [Boolean!]
  swapEnabled_not_in: [Boolean!]
  swapEnabledInternal: Boolean
  swapEnabledInternal_not: Boolean
  swapEnabledInternal_in: [Boolean!]
  swapEnabledInternal_not_in: [Boolean!]
  swapEnabledCurationSignal: Boolean
  swapEnabledCurationSignal_not: Boolean
  swapEnabledCurationSignal_in: [Boolean!]
  swapEnabledCurationSignal_not_in: [Boolean!]
  swapFee: BigDecimal
  swapFee_not: BigDecimal
  swapFee_gt: BigDecimal
  swapFee_lt: BigDecimal
  swapFee_gte: BigDecimal
  swapFee_lte: BigDecimal
  swapFee_in: [BigDecimal!]
  swapFee_not_in: [BigDecimal!]
  owner: Bytes
  owner_not: Bytes
  owner_gt: Bytes
  owner_lt: Bytes
  owner_gte: Bytes
  owner_lte: Bytes
  owner_in: [Bytes!]
  owner_not_in: [Bytes!]
  owner_contains: Bytes
  owner_not_contains: Bytes
  isPaused: Boolean
  isPaused_not: Boolean
  isPaused_in: [Boolean!]
  isPaused_not_in: [Boolean!]
  totalWeight: BigDecimal
  totalWeight_not: BigDecimal
  totalWeight_gt: BigDecimal
  totalWeight_lt: BigDecimal
  totalWeight_gte: BigDecimal
  totalWeight_lte: BigDecimal
  totalWeight_in: [BigDecimal!]
  totalWeight_not_in: [BigDecimal!]
  totalSwapVolume: BigDecimal
  totalSwapVolume_not: BigDecimal
  totalSwapVolume_gt: BigDecimal
  totalSwapVolume_lt: BigDecimal
  totalSwapVolume_gte: BigDecimal
  totalSwapVolume_lte: BigDecimal
  totalSwapVolume_in: [BigDecimal!]
  totalSwapVolume_not_in: [BigDecimal!]
  totalSwapFee: BigDecimal
  totalSwapFee_not: BigDecimal
  totalSwapFee_gt: BigDecimal
  totalSwapFee_lt: BigDecimal
  totalSwapFee_gte: BigDecimal
  totalSwapFee_lte: BigDecimal
  totalSwapFee_in: [BigDecimal!]
  totalSwapFee_not_in: [BigDecimal!]
  totalLiquidity: BigDecimal
  totalLiquidity_not: BigDecimal
  totalLiquidity_gt: BigDecimal
  totalLiquidity_lt: BigDecimal
  totalLiquidity_gte: BigDecimal
  totalLiquidity_lte: BigDecimal
  totalLiquidity_in: [BigDecimal!]
  totalLiquidity_not_in: [BigDecimal!]
  totalLiquiditySansBPT: BigDecimal
  totalLiquiditySansBPT_not: BigDecimal
  totalLiquiditySansBPT_gt: BigDecimal
  totalLiquiditySansBPT_lt: BigDecimal
  totalLiquiditySansBPT_gte: BigDecimal
  totalLiquiditySansBPT_lte: BigDecimal
  totalLiquiditySansBPT_in: [BigDecimal!]
  totalLiquiditySansBPT_not_in: [BigDecimal!]
  totalShares: BigDecimal
  totalShares_not: BigDecimal
  totalShares_gt: BigDecimal
  totalShares_lt: BigDecimal
  totalShares_gte: BigDecimal
  totalShares_lte: BigDecimal
  totalShares_in: [BigDecimal!]
  totalShares_not_in: [BigDecimal!]
  totalProtocolFee: BigDecimal
  totalProtocolFee_not: BigDecimal
  totalProtocolFee_gt: BigDecimal
  totalProtocolFee_lt: BigDecimal
  totalProtocolFee_gte: BigDecimal
  totalProtocolFee_lte: BigDecimal
  totalProtocolFee_in: [BigDecimal!]
  totalProtocolFee_not_in: [BigDecimal!]
  createTime: Int
  createTime_not: Int
  createTime_gt: Int
  createTime_lt: Int
  createTime_gte: Int
  createTime_lte: Int
  createTime_in: [Int!]
  createTime_not_in: [Int!]
  swapsCount: BigInt
  swapsCount_not: BigInt
  swapsCount_gt: BigInt
  swapsCount_lt: BigInt
  swapsCount_gte: BigInt
  swapsCount_lte: BigInt
  swapsCount_in: [BigInt!]
  swapsCount_not_in: [BigInt!]
  holdersCount: BigInt
  holdersCount_not: BigInt
  holdersCount_gt: BigInt
  holdersCount_lt: BigInt
  holdersCount_gte: BigInt
  holdersCount_lte: BigInt
  holdersCount_in: [BigInt!]
  holdersCount_not_in: [BigInt!]
  vaultID: String
  vaultID_not: String
  vaultID_gt: String
  vaultID_lt: String
  vaultID_gte: String
  vaultID_lte: String
  vaultID_in: [String!]
  vaultID_not_in: [String!]
  vaultID_contains: String
  vaultID_contains_nocase: String
  vaultID_not_contains: String
  vaultID_not_contains_nocase: String
  vaultID_starts_with: String
  vaultID_starts_with_nocase: String
  vaultID_not_starts_with: String
  vaultID_not_starts_with_nocase: String
  vaultID_ends_with: String
  vaultID_ends_with_nocase: String
  vaultID_not_ends_with: String
  vaultID_not_ends_with_nocase: String
  vaultID_: Balancer_filter
  tx: Bytes
  tx_not: Bytes
  tx_gt: Bytes
  tx_lt: Bytes
  tx_gte: Bytes
  tx_lte: Bytes
  tx_in: [Bytes!]
  tx_not_in: [Bytes!]
  tx_contains: Bytes
  tx_not_contains: Bytes
  tokensList: [Bytes!]
  tokensList_not: [Bytes!]
  tokensList_contains: [Bytes!]
  tokensList_contains_nocase: [Bytes!]
  tokensList_not_contains: [Bytes!]
  tokensList_not_contains_nocase: [Bytes!]
  tokens_: PoolToken_filter
  joinsExits_: JoinExit_filter
  swaps_: Swap_filter
  shares_: PoolShare_filter
  snapshots_: PoolSnapshot_filter
  historicalValues_: PoolHistoricalLiquidity_filter
  weightUpdates_: GradualWeightUpdate_filter
  amp: BigInt
  amp_not: BigInt
  amp_gt: BigInt
  amp_lt: BigInt
  amp_gte: BigInt
  amp_lte: BigInt
  amp_in: [BigInt!]
  amp_not_in: [BigInt!]
  latestAmpUpdate: String
  latestAmpUpdate_not: String
  latestAmpUpdate_gt: String
  latestAmpUpdate_lt: String
  latestAmpUpdate_gte: String
  latestAmpUpdate_lte: String
  latestAmpUpdate_in: [String!]
  latestAmpUpdate_not_in: [String!]
  latestAmpUpdate_contains: String
  latestAmpUpdate_contains_nocase: String
  latestAmpUpdate_not_contains: String
  latestAmpUpdate_not_contains_nocase: String
  latestAmpUpdate_starts_with: String
  latestAmpUpdate_starts_with_nocase: String
  latestAmpUpdate_not_starts_with: String
  latestAmpUpdate_not_starts_with_nocase: String
  latestAmpUpdate_ends_with: String
  latestAmpUpdate_ends_with_nocase: String
  latestAmpUpdate_not_ends_with: String
  latestAmpUpdate_not_ends_with_nocase: String
  latestAmpUpdate_: AmpUpdate_filter
  ampUpdates_: AmpUpdate_filter
  priceRateProviders_: PriceRateProvider_filter
  principalToken: Bytes
  principalToken_not: Bytes
  principalToken_gt: Bytes
  principalToken_lt: Bytes
  principalToken_gte: Bytes
  principalToken_lte: Bytes
  principalToken_in: [Bytes!]
  principalToken_not_in: [Bytes!]
  principalToken_contains: Bytes
  principalToken_not_contains: Bytes
  baseToken: Bytes
  baseToken_not: Bytes
  baseToken_gt: Bytes
  baseToken_lt: Bytes
  baseToken_gte: Bytes
  baseToken_lte: Bytes
  baseToken_in: [Bytes!]
  baseToken_not_in: [Bytes!]
  baseToken_contains: Bytes
  baseToken_not_contains: Bytes
  expiryTime: BigInt
  expiryTime_not: BigInt
  expiryTime_gt: BigInt
  expiryTime_lt: BigInt
  expiryTime_gte: BigInt
  expiryTime_lte: BigInt
  expiryTime_in: [BigInt!]
  expiryTime_not_in: [BigInt!]
  unitSeconds: BigInt
  unitSeconds_not: BigInt
  unitSeconds_gt: BigInt
  unitSeconds_lt: BigInt
  unitSeconds_gte: BigInt
  unitSeconds_lte: BigInt
  unitSeconds_in: [BigInt!]
  unitSeconds_not_in: [BigInt!]
  managementFee: BigDecimal
  managementFee_not: BigDecimal
  managementFee_gt: BigDecimal
  managementFee_lt: BigDecimal
  managementFee_gte: BigDecimal
  managementFee_lte: BigDecimal
  managementFee_in: [BigDecimal!]
  managementFee_not_in: [BigDecimal!]
  joinExitEnabled: Boolean
  joinExitEnabled_not: Boolean
  joinExitEnabled_in: [Boolean!]
  joinExitEnabled_not_in: [Boolean!]
  mustAllowlistLPs: Boolean
  mustAllowlistLPs_not: Boolean
  mustAllowlistLPs_in: [Boolean!]
  mustAllowlistLPs_not_in: [Boolean!]
  managementAumFee: BigDecimal
  managementAumFee_not: BigDecimal
  managementAumFee_gt: BigDecimal
  managementAumFee_lt: BigDecimal
  managementAumFee_gte: BigDecimal
  managementAumFee_lte: BigDecimal
  managementAumFee_in: [BigDecimal!]
  managementAumFee_not_in: [BigDecimal!]
  totalAumFeeCollectedInBPT: BigDecimal
  totalAumFeeCollectedInBPT_not: BigDecimal
  totalAumFeeCollectedInBPT_gt: BigDecimal
  totalAumFeeCollectedInBPT_lt: BigDecimal
  totalAumFeeCollectedInBPT_gte: BigDecimal
  totalAumFeeCollectedInBPT_lte: BigDecimal
  totalAumFeeCollectedInBPT_in: [BigDecimal!]
  totalAumFeeCollectedInBPT_not_in: [BigDecimal!]
  circuitBreakers_: CircuitBreaker_filter
  mainIndex: Int
  mainIndex_not: Int
  mainIndex_gt: Int
  mainIndex_lt: Int
  mainIndex_gte: Int
  mainIndex_lte: Int
  mainIndex_in: [Int!]
  mainIndex_not_in: [Int!]
  wrappedIndex: Int
  wrappedIndex_not: Int
  wrappedIndex_gt: Int
  wrappedIndex_lt: Int
  wrappedIndex_gte: Int
  wrappedIndex_lte: Int
  wrappedIndex_in: [Int!]
  wrappedIndex_not_in: [Int!]
  lowerTarget: BigDecimal
  lowerTarget_not: BigDecimal
  lowerTarget_gt: BigDecimal
  lowerTarget_lt: BigDecimal
  lowerTarget_gte: BigDecimal
  lowerTarget_lte: BigDecimal
  lowerTarget_in: [BigDecimal!]
  lowerTarget_not_in: [BigDecimal!]
  upperTarget: BigDecimal
  upperTarget_not: BigDecimal
  upperTarget_gt: BigDecimal
  upperTarget_lt: BigDecimal
  upperTarget_gte: BigDecimal
  upperTarget_lte: BigDecimal
  upperTarget_in: [BigDecimal!]
  upperTarget_not_in: [BigDecimal!]
  sqrtAlpha: BigDecimal
  sqrtAlpha_not: BigDecimal
  sqrtAlpha_gt: BigDecimal
  sqrtAlpha_lt: BigDecimal
  sqrtAlpha_gte: BigDecimal
  sqrtAlpha_lte: BigDecimal
  sqrtAlpha_in: [BigDecimal!]
  sqrtAlpha_not_in: [BigDecimal!]
  sqrtBeta: BigDecimal
  sqrtBeta_not: BigDecimal
  sqrtBeta_gt: BigDecimal
  sqrtBeta_lt: BigDecimal
  sqrtBeta_gte: BigDecimal
  sqrtBeta_lte: BigDecimal
  sqrtBeta_in: [BigDecimal!]
  sqrtBeta_not_in: [BigDecimal!]
  root3Alpha: BigDecimal
  root3Alpha_not: BigDecimal
  root3Alpha_gt: BigDecimal
  root3Alpha_lt: BigDecimal
  root3Alpha_gte: BigDecimal
  root3Alpha_lte: BigDecimal
  root3Alpha_in: [BigDecimal!]
  root3Alpha_not_in: [BigDecimal!]
  c: BigDecimal
  c_not: BigDecimal
  c_gt: BigDecimal
  c_lt: BigDecimal
  c_gte: BigDecimal
  c_lte: BigDecimal
  c_in: [BigDecimal!]
  c_not_in: [BigDecimal!]
  s: BigDecimal
  s_not: BigDecimal
  s_gt: BigDecimal
  s_lt: BigDecimal
  s_gte: BigDecimal
  s_lte: BigDecimal
  s_in: [BigDecimal!]
  s_not_in: [BigDecimal!]
  tauAlphaX: BigDecimal
  tauAlphaX_not: BigDecimal
  tauAlphaX_gt: BigDecimal
  tauAlphaX_lt: BigDecimal
  tauAlphaX_gte: BigDecimal
  tauAlphaX_lte: BigDecimal
  tauAlphaX_in: [BigDecimal!]
  tauAlphaX_not_in: [BigDecimal!]
  tauAlphaY: BigDecimal
  tauAlphaY_not: BigDecimal
  tauAlphaY_gt: BigDecimal
  tauAlphaY_lt: BigDecimal
  tauAlphaY_gte: BigDecimal
  tauAlphaY_lte: BigDecimal
  tauAlphaY_in: [BigDecimal!]
  tauAlphaY_not_in: [BigDecimal!]
  tauBetaX: BigDecimal
  tauBetaX_not: BigDecimal
  tauBetaX_gt: BigDecimal
  tauBetaX_lt: BigDecimal
  tauBetaX_gte: BigDecimal
  tauBetaX_lte: BigDecimal
  tauBetaX_in: [BigDecimal!]
  tauBetaX_not_in: [BigDecimal!]
  tauBetaY: BigDecimal
  tauBetaY_not: BigDecimal
  tauBetaY_gt: BigDecimal
  tauBetaY_lt: BigDecimal
  tauBetaY_gte: BigDecimal
  tauBetaY_lte: BigDecimal
  tauBetaY_in: [BigDecimal!]
  tauBetaY_not_in: [BigDecimal!]
  u: BigDecimal
  u_not: BigDecimal
  u_gt: BigDecimal
  u_lt: BigDecimal
  u_gte: BigDecimal
  u_lte: BigDecimal
  u_in: [BigDecimal!]
  u_not_in: [BigDecimal!]
  v: BigDecimal
  v_not: BigDecimal
  v_gt: BigDecimal
  v_lt: BigDecimal
  v_gte: BigDecimal
  v_lte: BigDecimal
  v_in: [BigDecimal!]
  v_not_in: [BigDecimal!]
  w: BigDecimal
  w_not: BigDecimal
  w_gt: BigDecimal
  w_lt: BigDecimal
  w_gte: BigDecimal
  w_lte: BigDecimal
  w_in: [BigDecimal!]
  w_not_in: [BigDecimal!]
  z: BigDecimal
  z_not: BigDecimal
  z_gt: BigDecimal
  z_lt: BigDecimal
  z_gte: BigDecimal
  z_lte: BigDecimal
  z_in: [BigDecimal!]
  z_not_in: [BigDecimal!]
  dSq: BigDecimal
  dSq_not: BigDecimal
  dSq_gt: BigDecimal
  dSq_lt: BigDecimal
  dSq_gte: BigDecimal
  dSq_lte: BigDecimal
  dSq_in: [BigDecimal!]
  dSq_not_in: [BigDecimal!]
  alpha: BigDecimal
  alpha_not: BigDecimal
  alpha_gt: BigDecimal
  alpha_lt: BigDecimal
  alpha_gte: BigDecimal
  alpha_lte: BigDecimal
  alpha_in: [BigDecimal!]
  alpha_not_in: [BigDecimal!]
  beta: BigDecimal
  beta_not: BigDecimal
  beta_gt: BigDecimal
  beta_lt: BigDecimal
  beta_gte: BigDecimal
  beta_lte: BigDecimal
  beta_in: [BigDecimal!]
  beta_not_in: [BigDecimal!]
  lambda: BigDecimal
  lambda_not: BigDecimal
  lambda_gt: BigDecimal
  lambda_lt: BigDecimal
  lambda_gte: BigDecimal
  lambda_lte: BigDecimal
  lambda_in: [BigDecimal!]
  lambda_not_in: [BigDecimal!]
  delta: BigDecimal
  delta_not: BigDecimal
  delta_gt: BigDecimal
  delta_lt: BigDecimal
  delta_gte: BigDecimal
  delta_lte: BigDecimal
  delta_in: [BigDecimal!]
  delta_not_in: [BigDecimal!]
  epsilon: BigDecimal
  epsilon_not: BigDecimal
  epsilon_gt: BigDecimal
  epsilon_lt: BigDecimal
  epsilon_gte: BigDecimal
  epsilon_lte: BigDecimal
  epsilon_in: [BigDecimal!]
  epsilon_not_in: [BigDecimal!]
  isInRecoveryMode: Boolean
  isInRecoveryMode_not: Boolean
  isInRecoveryMode_in: [Boolean!]
  isInRecoveryMode_not_in: [Boolean!]
  protocolSwapFeeCache: BigDecimal
  protocolSwapFeeCache_not: BigDecimal
  protocolSwapFeeCache_gt: BigDecimal
  protocolSwapFeeCache_lt: BigDecimal
  protocolSwapFeeCache_gte: BigDecimal
  protocolSwapFeeCache_lte: BigDecimal
  protocolSwapFeeCache_in: [BigDecimal!]
  protocolSwapFeeCache_not_in: [BigDecimal!]
  protocolYieldFeeCache: BigDecimal
  protocolYieldFeeCache_not: BigDecimal
  protocolYieldFeeCache_gt: BigDecimal
  protocolYieldFeeCache_lt: BigDecimal
  protocolYieldFeeCache_gte: BigDecimal
  protocolYieldFeeCache_lte: BigDecimal
  protocolYieldFeeCache_in: [BigDecimal!]
  protocolYieldFeeCache_not_in: [BigDecimal!]
  protocolAumFeeCache: BigDecimal
  protocolAumFeeCache_not: BigDecimal
  protocolAumFeeCache_gt: BigDecimal
  protocolAumFeeCache_lt: BigDecimal
  protocolAumFeeCache_gte: BigDecimal
  protocolAumFeeCache_lte: BigDecimal
  protocolAumFeeCache_in: [BigDecimal!]
  protocolAumFeeCache_not_in: [BigDecimal!]
  totalProtocolFeePaidInBPT: BigDecimal
  totalProtocolFeePaidInBPT_not: BigDecimal
  totalProtocolFeePaidInBPT_gt: BigDecimal
  totalProtocolFeePaidInBPT_lt: BigDecimal
  totalProtocolFeePaidInBPT_gte: BigDecimal
  totalProtocolFeePaidInBPT_lte: BigDecimal
  totalProtocolFeePaidInBPT_in: [BigDecimal!]
  totalProtocolFeePaidInBPT_not_in: [BigDecimal!]
  lastJoinExitAmp: BigInt
  lastJoinExitAmp_not: BigInt
  lastJoinExitAmp_gt: BigInt
  lastJoinExitAmp_lt: BigInt
  lastJoinExitAmp_gte: BigInt
  lastJoinExitAmp_lte: BigInt
  lastJoinExitAmp_in: [BigInt!]
  lastJoinExitAmp_not_in: [BigInt!]
  lastPostJoinExitInvariant: BigDecimal
  lastPostJoinExitInvariant_not: BigDecimal
  lastPostJoinExitInvariant_gt: BigDecimal
  lastPostJoinExitInvariant_lt: BigDecimal
  lastPostJoinExitInvariant_gte: BigDecimal
  lastPostJoinExitInvariant_lte: BigDecimal
  lastPostJoinExitInvariant_in: [BigDecimal!]
  lastPostJoinExitInvariant_not_in: [BigDecimal!]
  protocolId: Int
  protocolId_not: Int
  protocolId_gt: Int
  protocolId_lt: Int
  protocolId_gte: Int
  protocolId_lte: Int
  protocolId_in: [Int!]
  protocolId_not_in: [Int!]
  protocolIdData: String
  protocolIdData_not: String
  protocolIdData_gt: String
  protocolIdData_lt: String
  protocolIdData_gte: String
  protocolIdData_lte: String
  protocolIdData_in: [String!]
  protocolIdData_not_in: [String!]
  protocolIdData_contains: String
  protocolIdData_contains_nocase: String
  protocolIdData_not_contains: String
  protocolIdData_not_contains_nocase: String
  protocolIdData_starts_with: String
  protocolIdData_starts_with_nocase: String
  protocolIdData_not_starts_with: String
  protocolIdData_not_starts_with_nocase: String
  protocolIdData_ends_with: String
  protocolIdData_ends_with_nocase: String
  protocolIdData_not_ends_with: String
  protocolIdData_not_ends_with_nocase: String
  protocolIdData_: ProtocolIdData_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Pool_filter]
  or: [Pool_filter]
}

enum Pool_orderBy {
  id
  address
  poolType
  poolTypeVersion
  factory
  strategyType
  oracleEnabled
  symbol
  name
  swapEnabled
  swapEnabledInternal
  swapEnabledCurationSignal
  swapFee
  owner
  isPaused
  totalWeight
  totalSwapVolume
  totalSwapFee
  totalLiquidity
  totalLiquiditySansBPT
  totalShares
  totalProtocolFee
  createTime
  swapsCount
  holdersCount
  vaultID
  vaultID__id
  vaultID__poolCount
  vaultID__totalLiquidity
  vaultID__totalSwapCount
  vaultID__totalSwapVolume
  vaultID__totalSwapFee
  vaultID__totalProtocolFee
  vaultID__protocolFeesCollector
  tx
  tokensList
  tokens
  joinsExits
  swaps
  shares
  snapshots
  historicalValues
  weightUpdates
  amp
  latestAmpUpdate
  latestAmpUpdate__id
  latestAmpUpdate__scheduledTimestamp
  latestAmpUpdate__startTimestamp
  latestAmpUpdate__endTimestamp
  latestAmpUpdate__startAmp
  latestAmpUpdate__endAmp
  ampUpdates
  priceRateProviders
  principalToken
  baseToken
  expiryTime
  unitSeconds
  managementFee
  joinExitEnabled
  mustAllowlistLPs
  managementAumFee
  totalAumFeeCollectedInBPT
  circuitBreakers
  mainIndex
  wrappedIndex
  lowerTarget
  upperTarget
  sqrtAlpha
  sqrtBeta
  root3Alpha
  c
  s
  tauAlphaX
  tauAlphaY
  tauBetaX
  tauBetaY
  u
  v
  w
  z
  dSq
  alpha
  beta
  lambda
  delta
  epsilon
  isInRecoveryMode
  protocolSwapFeeCache
  protocolYieldFeeCache
  protocolAumFeeCache
  totalProtocolFeePaidInBPT
  lastJoinExitAmp
  lastPostJoinExitInvariant
  protocolId
  protocolIdData
  protocolIdData__id
  protocolIdData__name
}

type PriceRateProvider {
  id: ID!
  poolId: Pool!
  token: PoolToken!
  address: Bytes!
  rate: BigDecimal
  lastCached: Int
  cacheDuration: Int
  cacheExpiry: Int
}

input PriceRateProvider_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  poolId: String
  poolId_not: String
  poolId_gt: String
  poolId_lt: String
  poolId_gte: String
  poolId_lte: String
  poolId_in: [String!]
  poolId_not_in: [String!]
  poolId_contains: String
  poolId_contains_nocase: String
  poolId_not_contains: String
  poolId_not_contains_nocase: String
  poolId_starts_with: String
  poolId_starts_with_nocase: String
  poolId_not_starts_with: String
  poolId_not_starts_with_nocase: String
  poolId_ends_with: String
  poolId_ends_with_nocase: String
  poolId_not_ends_with: String
  poolId_not_ends_with_nocase: String
  poolId_: Pool_filter
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: PoolToken_filter
  address: Bytes
  address_not: Bytes
  address_gt: Bytes
  address_lt: Bytes
  address_gte: Bytes
  address_lte: Bytes
  address_in: [Bytes!]
  address_not_in: [Bytes!]
  address_contains: Bytes
  address_not_contains: Bytes
  rate: BigDecimal
  rate_not: BigDecimal
  rate_gt: BigDecimal
  rate_lt: BigDecimal
  rate_gte: BigDecimal
  rate_lte: BigDecimal
  rate_in: [BigDecimal!]
  rate_not_in: [BigDecimal!]
  lastCached: Int
  lastCached_not: Int
  lastCached_gt: Int
  lastCached_lt: Int
  lastCached_gte: Int
  lastCached_lte: Int
  lastCached_in: [Int!]
  lastCached_not_in: [Int!]
  cacheDuration: Int
  cacheDuration_not: Int
  cacheDuration_gt: Int
  cacheDuration_lt: Int
  cacheDuration_gte: Int
  cacheDuration_lte: Int
  cacheDuration_in: [Int!]
  cacheDuration_not_in: [Int!]
  cacheExpiry: Int
  cacheExpiry_not: Int
  cacheExpiry_gt: Int
  cacheExpiry_lt: Int
  cacheExpiry_gte: Int
  cacheExpiry_lte: Int
  cacheExpiry_in: [Int!]
  cacheExpiry_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PriceRateProvider_filter]
  or: [PriceRateProvider_filter]
}

enum PriceRateProvider_orderBy {
  id
  poolId
  poolId__id
  poolId__address
  poolId__poolType
  poolId__poolTypeVersion
  poolId__factory
  poolId__strategyType
  poolId__oracleEnabled
  poolId__symbol
  poolId__name
  poolId__swapEnabled
  poolId__swapEnabledInternal
  poolId__swapEnabledCurationSignal
  poolId__swapFee
  poolId__owner
  poolId__isPaused
  poolId__totalWeight
  poolId__totalSwapVolume
  poolId__totalSwapFee
  poolId__totalLiquidity
  poolId__totalLiquiditySansBPT
  poolId__totalShares
  poolId__totalProtocolFee
  poolId__createTime
  poolId__swapsCount
  poolId__holdersCount
  poolId__tx
  poolId__amp
  poolId__principalToken
  poolId__baseToken
  poolId__expiryTime
  poolId__unitSeconds
  poolId__managementFee
  poolId__joinExitEnabled
  poolId__mustAllowlistLPs
  poolId__managementAumFee
  poolId__totalAumFeeCollectedInBPT
  poolId__mainIndex
  poolId__wrappedIndex
  poolId__lowerTarget
  poolId__upperTarget
  poolId__sqrtAlpha
  poolId__sqrtBeta
  poolId__root3Alpha
  poolId__c
  poolId__s
  poolId__tauAlphaX
  poolId__tauAlphaY
  poolId__tauBetaX
  poolId__tauBetaY
  poolId__u
  poolId__v
  poolId__w
  poolId__z
  poolId__dSq
  poolId__alpha
  poolId__beta
  poolId__lambda
  poolId__delta
  poolId__epsilon
  poolId__isInRecoveryMode
  poolId__protocolSwapFeeCache
  poolId__protocolYieldFeeCache
  poolId__protocolAumFeeCache
  poolId__totalProtocolFeePaidInBPT
  poolId__lastJoinExitAmp
  poolId__lastPostJoinExitInvariant
  poolId__protocolId
  token
  token__id
  token__assetManager
  token__symbol
  token__name
  token__decimals
  token__index
  token__address
  token__oldPriceRate
  token__priceRate
  token__balance
  token__paidProtocolFees
  token__cashBalance
  token__managedBalance
  token__weight
  token__isExemptFromYieldProtocolFee
  address
  rate
  lastCached
  cacheDuration
  cacheExpiry
}

type ProtocolIdData {
  id: ID!
  name: String!
}

input ProtocolIdData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ProtocolIdData_filter]
  or: [ProtocolIdData_filter]
}

enum ProtocolIdData_orderBy {
  id
  name
}

type Query {
  balancer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Balancer
  balancers(
    skip: Int = 0
    first: Int = 100
    orderBy: Balancer_orderBy
    orderDirection: OrderDirection
    where: Balancer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Balancer!]!
  pool(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Pool
  pools(
    skip: Int = 0
    first: Int = 100
    orderBy: Pool_orderBy
    orderDirection: OrderDirection
    where: Pool_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Pool!]!
  poolContract(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PoolContract
  poolContracts(
    skip: Int = 0
    first: Int = 100
    orderBy: PoolContract_orderBy
    orderDirection: OrderDirection
    where: PoolContract_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PoolContract!]!
  poolToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PoolToken
  poolTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: PoolToken_orderBy
    orderDirection: OrderDirection
    where: PoolToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PoolToken!]!
  priceRateProvider(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PriceRateProvider
  priceRateProviders(
    skip: Int = 0
    first: Int = 100
    orderBy: PriceRateProvider_orderBy
    orderDirection: OrderDirection
    where: PriceRateProvider_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PriceRateProvider!]!
  circuitBreaker(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CircuitBreaker
  circuitBreakers(
    skip: Int = 0
    first: Int = 100
    orderBy: CircuitBreaker_orderBy
    orderDirection: OrderDirection
    where: CircuitBreaker_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CircuitBreaker!]!
  poolShare(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PoolShare
  poolShares(
    skip: Int = 0
    first: Int = 100
    orderBy: PoolShare_orderBy
    orderDirection: OrderDirection
    where: PoolShare_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PoolShare!]!
  user(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): User
  users(
    skip: Int = 0
    first: Int = 100
    orderBy: User_orderBy
    orderDirection: OrderDirection
    where: User_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [User!]!
  userInternalBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UserInternalBalance
  userInternalBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: UserInternalBalance_orderBy
    orderDirection: OrderDirection
    where: UserInternalBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UserInternalBalance!]!
  gradualWeightUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GradualWeightUpdate
  gradualWeightUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: GradualWeightUpdate_orderBy
    orderDirection: OrderDirection
    where: GradualWeightUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GradualWeightUpdate!]!
  ampUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AmpUpdate
  ampUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: AmpUpdate_orderBy
    orderDirection: OrderDirection
    where: AmpUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AmpUpdate!]!
  swapFeeUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SwapFeeUpdate
  swapFeeUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: SwapFeeUpdate_orderBy
    orderDirection: OrderDirection
    where: SwapFeeUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SwapFeeUpdate!]!
  swap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Swap
  swaps(
    skip: Int = 0
    first: Int = 100
    orderBy: Swap_orderBy
    orderDirection: OrderDirection
    where: Swap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Swap!]!
  joinExit(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): JoinExit
  joinExits(
    skip: Int = 0
    first: Int = 100
    orderBy: JoinExit_orderBy
    orderDirection: OrderDirection
    where: JoinExit_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [JoinExit!]!
  latestPrice(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LatestPrice
  latestPrices(
    skip: Int = 0
    first: Int = 100
    orderBy: LatestPrice_orderBy
    orderDirection: OrderDirection
    where: LatestPrice_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LatestPrice!]!
  poolHistoricalLiquidity(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PoolHistoricalLiquidity
  poolHistoricalLiquidities(
    skip: Int = 0
    first: Int = 100
    orderBy: PoolHistoricalLiquidity_orderBy
    orderDirection: OrderDirection
    where: PoolHistoricalLiquidity_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PoolHistoricalLiquidity!]!
  tokenPrice(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenPrice
  tokenPrices(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenPrice_orderBy
    orderDirection: OrderDirection
    where: TokenPrice_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenPrice!]!
  managementOperation(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ManagementOperation
  managementOperations(
    skip: Int = 0
    first: Int = 100
    orderBy: ManagementOperation_orderBy
    orderDirection: OrderDirection
    where: ManagementOperation_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ManagementOperation!]!
  poolSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PoolSnapshot
  poolSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: PoolSnapshot_orderBy
    orderDirection: OrderDirection
    where: PoolSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PoolSnapshot!]!
  token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Token
  tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Token_orderBy
    orderDirection: OrderDirection
    where: Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Token!]!
  tokenSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenSnapshot
  tokenSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenSnapshot_orderBy
    orderDirection: OrderDirection
    where: TokenSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenSnapshot!]!
  tradePair(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TradePair
  tradePairs(
    skip: Int = 0
    first: Int = 100
    orderBy: TradePair_orderBy
    orderDirection: OrderDirection
    where: TradePair_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TradePair!]!
  tradePairSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TradePairSnapshot
  tradePairSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: TradePairSnapshot_orderBy
    orderDirection: OrderDirection
    where: TradePairSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TradePairSnapshot!]!
  balancerSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BalancerSnapshot
  balancerSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: BalancerSnapshot_orderBy
    orderDirection: OrderDirection
    where: BalancerSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BalancerSnapshot!]!
  protocolIdData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ProtocolIdData
  protocolIdDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: ProtocolIdData_orderBy
    orderDirection: OrderDirection
    where: ProtocolIdData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ProtocolIdData!]!
  fxoracle(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FXOracle
  fxoracles(
    skip: Int = 0
    first: Int = 100
    orderBy: FXOracle_orderBy
    orderDirection: OrderDirection
    where: FXOracle_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FXOracle!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Subscription {
  balancer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Balancer
  balancers(
    skip: Int = 0
    first: Int = 100
    orderBy: Balancer_orderBy
    orderDirection: OrderDirection
    where: Balancer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Balancer!]!
  pool(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Pool
  pools(
    skip: Int = 0
    first: Int = 100
    orderBy: Pool_orderBy
    orderDirection: OrderDirection
    where: Pool_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Pool!]!
  poolContract(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PoolContract
  poolContracts(
    skip: Int = 0
    first: Int = 100
    orderBy: PoolContract_orderBy
    orderDirection: OrderDirection
    where: PoolContract_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PoolContract!]!
  poolToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PoolToken
  poolTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: PoolToken_orderBy
    orderDirection: OrderDirection
    where: PoolToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PoolToken!]!
  priceRateProvider(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PriceRateProvider
  priceRateProviders(
    skip: Int = 0
    first: Int = 100
    orderBy: PriceRateProvider_orderBy
    orderDirection: OrderDirection
    where: PriceRateProvider_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PriceRateProvider!]!
  circuitBreaker(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CircuitBreaker
  circuitBreakers(
    skip: Int = 0
    first: Int = 100
    orderBy: CircuitBreaker_orderBy
    orderDirection: OrderDirection
    where: CircuitBreaker_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CircuitBreaker!]!
  poolShare(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PoolShare
  poolShares(
    skip: Int = 0
    first: Int = 100
    orderBy: PoolShare_orderBy
    orderDirection: OrderDirection
    where: PoolShare_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PoolShare!]!
  user(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): User
  users(
    skip: Int = 0
    first: Int = 100
    orderBy: User_orderBy
    orderDirection: OrderDirection
    where: User_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [User!]!
  userInternalBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UserInternalBalance
  userInternalBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: UserInternalBalance_orderBy
    orderDirection: OrderDirection
    where: UserInternalBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UserInternalBalance!]!
  gradualWeightUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GradualWeightUpdate
  gradualWeightUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: GradualWeightUpdate_orderBy
    orderDirection: OrderDirection
    where: GradualWeightUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GradualWeightUpdate!]!
  ampUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AmpUpdate
  ampUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: AmpUpdate_orderBy
    orderDirection: OrderDirection
    where: AmpUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AmpUpdate!]!
  swapFeeUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SwapFeeUpdate
  swapFeeUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: SwapFeeUpdate_orderBy
    orderDirection: OrderDirection
    where: SwapFeeUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SwapFeeUpdate!]!
  swap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Swap
  swaps(
    skip: Int = 0
    first: Int = 100
    orderBy: Swap_orderBy
    orderDirection: OrderDirection
    where: Swap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Swap!]!
  joinExit(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): JoinExit
  joinExits(
    skip: Int = 0
    first: Int = 100
    orderBy: JoinExit_orderBy
    orderDirection: OrderDirection
    where: JoinExit_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [JoinExit!]!
  latestPrice(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LatestPrice
  latestPrices(
    skip: Int = 0
    first: Int = 100
    orderBy: LatestPrice_orderBy
    orderDirection: OrderDirection
    where: LatestPrice_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LatestPrice!]!
  poolHistoricalLiquidity(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PoolHistoricalLiquidity
  poolHistoricalLiquidities(
    skip: Int = 0
    first: Int = 100
    orderBy: PoolHistoricalLiquidity_orderBy
    orderDirection: OrderDirection
    where: PoolHistoricalLiquidity_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PoolHistoricalLiquidity!]!
  tokenPrice(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenPrice
  tokenPrices(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenPrice_orderBy
    orderDirection: OrderDirection
    where: TokenPrice_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenPrice!]!
  managementOperation(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ManagementOperation
  managementOperations(
    skip: Int = 0
    first: Int = 100
    orderBy: ManagementOperation_orderBy
    orderDirection: OrderDirection
    where: ManagementOperation_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ManagementOperation!]!
  poolSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PoolSnapshot
  poolSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: PoolSnapshot_orderBy
    orderDirection: OrderDirection
    where: PoolSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PoolSnapshot!]!
  token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Token
  tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Token_orderBy
    orderDirection: OrderDirection
    where: Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Token!]!
  tokenSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenSnapshot
  tokenSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenSnapshot_orderBy
    orderDirection: OrderDirection
    where: TokenSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenSnapshot!]!
  tradePair(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TradePair
  tradePairs(
    skip: Int = 0
    first: Int = 100
    orderBy: TradePair_orderBy
    orderDirection: OrderDirection
    where: TradePair_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TradePair!]!
  tradePairSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TradePairSnapshot
  tradePairSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: TradePairSnapshot_orderBy
    orderDirection: OrderDirection
    where: TradePairSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TradePairSnapshot!]!
  balancerSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BalancerSnapshot
  balancerSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: BalancerSnapshot_orderBy
    orderDirection: OrderDirection
    where: BalancerSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BalancerSnapshot!]!
  protocolIdData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ProtocolIdData
  protocolIdDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: ProtocolIdData_orderBy
    orderDirection: OrderDirection
    where: ProtocolIdData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ProtocolIdData!]!
  fxoracle(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FXOracle
  fxoracles(
    skip: Int = 0
    first: Int = 100
    orderBy: FXOracle_orderBy
    orderDirection: OrderDirection
    where: FXOracle_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FXOracle!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Swap {
  id: ID!
  caller: Bytes!
  tokenIn: Bytes!
  tokenInSym: String!
  tokenOut: Bytes!
  tokenOutSym: String!
  tokenAmountIn: BigDecimal!
  tokenAmountOut: BigDecimal!
  valueUSD: BigDecimal!
  poolId: Pool!
  userAddress: User!
  timestamp: Int!
  block: BigInt
  tx: Bytes!
}

type SwapFeeUpdate {
  id: ID!
  pool: Pool!
  scheduledTimestamp: Int!
  startTimestamp: BigInt!
  endTimestamp: BigInt!
  startSwapFeePercentage: BigDecimal!
  endSwapFeePercentage: BigDecimal!
}

input SwapFeeUpdate_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  scheduledTimestamp: Int
  scheduledTimestamp_not: Int
  scheduledTimestamp_gt: Int
  scheduledTimestamp_lt: Int
  scheduledTimestamp_gte: Int
  scheduledTimestamp_lte: Int
  scheduledTimestamp_in: [Int!]
  scheduledTimestamp_not_in: [Int!]
  startTimestamp: BigInt
  startTimestamp_not: BigInt
  startTimestamp_gt: BigInt
  startTimestamp_lt: BigInt
  startTimestamp_gte: BigInt
  startTimestamp_lte: BigInt
  startTimestamp_in: [BigInt!]
  startTimestamp_not_in: [BigInt!]
  endTimestamp: BigInt
  endTimestamp_not: BigInt
  endTimestamp_gt: BigInt
  endTimestamp_lt: BigInt
  endTimestamp_gte: BigInt
  endTimestamp_lte: BigInt
  endTimestamp_in: [BigInt!]
  endTimestamp_not_in: [BigInt!]
  startSwapFeePercentage: BigDecimal
  startSwapFeePercentage_not: BigDecimal
  startSwapFeePercentage_gt: BigDecimal
  startSwapFeePercentage_lt: BigDecimal
  startSwapFeePercentage_gte: BigDecimal
  startSwapFeePercentage_lte: BigDecimal
  startSwapFeePercentage_in: [BigDecimal!]
  startSwapFeePercentage_not_in: [BigDecimal!]
  endSwapFeePercentage: BigDecimal
  endSwapFeePercentage_not: BigDecimal
  endSwapFeePercentage_gt: BigDecimal
  endSwapFeePercentage_lt: BigDecimal
  endSwapFeePercentage_gte: BigDecimal
  endSwapFeePercentage_lte: BigDecimal
  endSwapFeePercentage_in: [BigDecimal!]
  endSwapFeePercentage_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [SwapFeeUpdate_filter]
  or: [SwapFeeUpdate_filter]
}

enum SwapFeeUpdate_orderBy {
  id
  pool
  pool__id
  pool__address
  pool__poolType
  pool__poolTypeVersion
  pool__factory
  pool__strategyType
  pool__oracleEnabled
  pool__symbol
  pool__name
  pool__swapEnabled
  pool__swapEnabledInternal
  pool__swapEnabledCurationSignal
  pool__swapFee
  pool__owner
  pool__isPaused
  pool__totalWeight
  pool__totalSwapVolume
  pool__totalSwapFee
  pool__totalLiquidity
  pool__totalLiquiditySansBPT
  pool__totalShares
  pool__totalProtocolFee
  pool__createTime
  pool__swapsCount
  pool__holdersCount
  pool__tx
  pool__amp
  pool__principalToken
  pool__baseToken
  pool__expiryTime
  pool__unitSeconds
  pool__managementFee
  pool__joinExitEnabled
  pool__mustAllowlistLPs
  pool__managementAumFee
  pool__totalAumFeeCollectedInBPT
  pool__mainIndex
  pool__wrappedIndex
  pool__lowerTarget
  pool__upperTarget
  pool__sqrtAlpha
  pool__sqrtBeta
  pool__root3Alpha
  pool__c
  pool__s
  pool__tauAlphaX
  pool__tauAlphaY
  pool__tauBetaX
  pool__tauBetaY
  pool__u
  pool__v
  pool__w
  pool__z
  pool__dSq
  pool__alpha
  pool__beta
  pool__lambda
  pool__delta
  pool__epsilon
  pool__isInRecoveryMode
  pool__protocolSwapFeeCache
  pool__protocolYieldFeeCache
  pool__protocolAumFeeCache
  pool__totalProtocolFeePaidInBPT
  pool__lastJoinExitAmp
  pool__lastPostJoinExitInvariant
  pool__protocolId
  scheduledTimestamp
  startTimestamp
  endTimestamp
  startSwapFeePercentage
  endSwapFeePercentage
}

input Swap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  caller: Bytes
  caller_not: Bytes
  caller_gt: Bytes
  caller_lt: Bytes
  caller_gte: Bytes
  caller_lte: Bytes
  caller_in: [Bytes!]
  caller_not_in: [Bytes!]
  caller_contains: Bytes
  caller_not_contains: Bytes
  tokenIn: Bytes
  tokenIn_not: Bytes
  tokenIn_gt: Bytes
  tokenIn_lt: Bytes
  tokenIn_gte: Bytes
  tokenIn_lte: Bytes
  tokenIn_in: [Bytes!]
  tokenIn_not_in: [Bytes!]
  tokenIn_contains: Bytes
  tokenIn_not_contains: Bytes
  tokenInSym: String
  tokenInSym_not: String
  tokenInSym_gt: String
  tokenInSym_lt: String
  tokenInSym_gte: String
  tokenInSym_lte: String
  tokenInSym_in: [String!]
  tokenInSym_not_in: [String!]
  tokenInSym_contains: String
  tokenInSym_contains_nocase: String
  tokenInSym_not_contains: String
  tokenInSym_not_contains_nocase: String
  tokenInSym_starts_with: String
  tokenInSym_starts_with_nocase: String
  tokenInSym_not_starts_with: String
  tokenInSym_not_starts_with_nocase: String
  tokenInSym_ends_with: String
  tokenInSym_ends_with_nocase: String
  tokenInSym_not_ends_with: String
  tokenInSym_not_ends_with_nocase: String
  tokenOut: Bytes
  tokenOut_not: Bytes
  tokenOut_gt: Bytes
  tokenOut_lt: Bytes
  tokenOut_gte: Bytes
  tokenOut_lte: Bytes
  tokenOut_in: [Bytes!]
  tokenOut_not_in: [Bytes!]
  tokenOut_contains: Bytes
  tokenOut_not_contains: Bytes
  tokenOutSym: String
  tokenOutSym_not: String
  tokenOutSym_gt: String
  tokenOutSym_lt: String
  tokenOutSym_gte: String
  tokenOutSym_lte: String
  tokenOutSym_in: [String!]
  tokenOutSym_not_in: [String!]
  tokenOutSym_contains: String
  tokenOutSym_contains_nocase: String
  tokenOutSym_not_contains: String
  tokenOutSym_not_contains_nocase: String
  tokenOutSym_starts_with: String
  tokenOutSym_starts_with_nocase: String
  tokenOutSym_not_starts_with: String
  tokenOutSym_not_starts_with_nocase: String
  tokenOutSym_ends_with: String
  tokenOutSym_ends_with_nocase: String
  tokenOutSym_not_ends_with: String
  tokenOutSym_not_ends_with_nocase: String
  tokenAmountIn: BigDecimal
  tokenAmountIn_not: BigDecimal
  tokenAmountIn_gt: BigDecimal
  tokenAmountIn_lt: BigDecimal
  tokenAmountIn_gte: BigDecimal
  tokenAmountIn_lte: BigDecimal
  tokenAmountIn_in: [BigDecimal!]
  tokenAmountIn_not_in: [BigDecimal!]
  tokenAmountOut: BigDecimal
  tokenAmountOut_not: BigDecimal
  tokenAmountOut_gt: BigDecimal
  tokenAmountOut_lt: BigDecimal
  tokenAmountOut_gte: BigDecimal
  tokenAmountOut_lte: BigDecimal
  tokenAmountOut_in: [BigDecimal!]
  tokenAmountOut_not_in: [BigDecimal!]
  valueUSD: BigDecimal
  valueUSD_not: BigDecimal
  valueUSD_gt: BigDecimal
  valueUSD_lt: BigDecimal
  valueUSD_gte: BigDecimal
  valueUSD_lte: BigDecimal
  valueUSD_in: [BigDecimal!]
  valueUSD_not_in: [BigDecimal!]
  poolId: String
  poolId_not: String
  poolId_gt: String
  poolId_lt: String
  poolId_gte: String
  poolId_lte: String
  poolId_in: [String!]
  poolId_not_in: [String!]
  poolId_contains: String
  poolId_contains_nocase: String
  poolId_not_contains: String
  poolId_not_contains_nocase: String
  poolId_starts_with: String
  poolId_starts_with_nocase: String
  poolId_not_starts_with: String
  poolId_not_starts_with_nocase: String
  poolId_ends_with: String
  poolId_ends_with_nocase: String
  poolId_not_ends_with: String
  poolId_not_ends_with_nocase: String
  poolId_: Pool_filter
  userAddress: String
  userAddress_not: String
  userAddress_gt: String
  userAddress_lt: String
  userAddress_gte: String
  userAddress_lte: String
  userAddress_in: [String!]
  userAddress_not_in: [String!]
  userAddress_contains: String
  userAddress_contains_nocase: String
  userAddress_not_contains: String
  userAddress_not_contains_nocase: String
  userAddress_starts_with: String
  userAddress_starts_with_nocase: String
  userAddress_not_starts_with: String
  userAddress_not_starts_with_nocase: String
  userAddress_ends_with: String
  userAddress_ends_with_nocase: String
  userAddress_not_ends_with: String
  userAddress_not_ends_with_nocase: String
  userAddress_: User_filter
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  tx: Bytes
  tx_not: Bytes
  tx_gt: Bytes
  tx_lt: Bytes
  tx_gte: Bytes
  tx_lte: Bytes
  tx_in: [Bytes!]
  tx_not_in: [Bytes!]
  tx_contains: Bytes
  tx_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Swap_filter]
  or: [Swap_filter]
}

enum Swap_orderBy {
  id
  caller
  tokenIn
  tokenInSym
  tokenOut
  tokenOutSym
  tokenAmountIn
  tokenAmountOut
  valueUSD
  poolId
  poolId__id
  poolId__address
  poolId__poolType
  poolId__poolTypeVersion
  poolId__factory
  poolId__strategyType
  poolId__oracleEnabled
  poolId__symbol
  poolId__name
  poolId__swapEnabled
  poolId__swapEnabledInternal
  poolId__swapEnabledCurationSignal
  poolId__swapFee
  poolId__owner
  poolId__isPaused
  poolId__totalWeight
  poolId__totalSwapVolume
  poolId__totalSwapFee
  poolId__totalLiquidity
  poolId__totalLiquiditySansBPT
  poolId__totalShares
  poolId__totalProtocolFee
  poolId__createTime
  poolId__swapsCount
  poolId__holdersCount
  poolId__tx
  poolId__amp
  poolId__principalToken
  poolId__baseToken
  poolId__expiryTime
  poolId__unitSeconds
  poolId__managementFee
  poolId__joinExitEnabled
  poolId__mustAllowlistLPs
  poolId__managementAumFee
  poolId__totalAumFeeCollectedInBPT
  poolId__mainIndex
  poolId__wrappedIndex
  poolId__lowerTarget
  poolId__upperTarget
  poolId__sqrtAlpha
  poolId__sqrtBeta
  poolId__root3Alpha
  poolId__c
  poolId__s
  poolId__tauAlphaX
  poolId__tauAlphaY
  poolId__tauBetaX
  poolId__tauBetaY
  poolId__u
  poolId__v
  poolId__w
  poolId__z
  poolId__dSq
  poolId__alpha
  poolId__beta
  poolId__lambda
  poolId__delta
  poolId__epsilon
  poolId__isInRecoveryMode
  poolId__protocolSwapFeeCache
  poolId__protocolYieldFeeCache
  poolId__protocolAumFeeCache
  poolId__totalProtocolFeePaidInBPT
  poolId__lastJoinExitAmp
  poolId__lastPostJoinExitInvariant
  poolId__protocolId
  userAddress
  userAddress__id
  timestamp
  block
  tx
}

"""
A string representation of microseconds UNIX timestamp (16 digits)

"""
scalar Timestamp

type Token {
  id: ID!
  symbol: String
  name: String
  decimals: Int!
  address: String!
  totalBalanceUSD: BigDecimal!
  totalBalanceNotional: BigDecimal!
  totalVolumeUSD: BigDecimal!
  totalVolumeNotional: BigDecimal!
  totalSwapCount: BigInt!
  latestPrice: LatestPrice
  latestUSDPrice: BigDecimal
  latestUSDPriceTimestamp: BigInt
  latestFXPrice: BigDecimal
  pool: Pool
  fxOracleDecimals: Int
}

type TokenPrice {
  id: ID!
  poolId: Pool!
  asset: Bytes!
  amount: BigDecimal!
  pricingAsset: Bytes!
  price: BigDecimal!
  block: BigInt!
  timestamp: Int!
}

input TokenPrice_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  poolId: String
  poolId_not: String
  poolId_gt: String
  poolId_lt: String
  poolId_gte: String
  poolId_lte: String
  poolId_in: [String!]
  poolId_not_in: [String!]
  poolId_contains: String
  poolId_contains_nocase: String
  poolId_not_contains: String
  poolId_not_contains_nocase: String
  poolId_starts_with: String
  poolId_starts_with_nocase: String
  poolId_not_starts_with: String
  poolId_not_starts_with_nocase: String
  poolId_ends_with: String
  poolId_ends_with_nocase: String
  poolId_not_ends_with: String
  poolId_not_ends_with_nocase: String
  poolId_: Pool_filter
  asset: Bytes
  asset_not: Bytes
  asset_gt: Bytes
  asset_lt: Bytes
  asset_gte: Bytes
  asset_lte: Bytes
  asset_in: [Bytes!]
  asset_not_in: [Bytes!]
  asset_contains: Bytes
  asset_not_contains: Bytes
  amount: BigDecimal
  amount_not: BigDecimal
  amount_gt: BigDecimal
  amount_lt: BigDecimal
  amount_gte: BigDecimal
  amount_lte: BigDecimal
  amount_in: [BigDecimal!]
  amount_not_in: [BigDecimal!]
  pricingAsset: Bytes
  pricingAsset_not: Bytes
  pricingAsset_gt: Bytes
  pricingAsset_lt: Bytes
  pricingAsset_gte: Bytes
  pricingAsset_lte: Bytes
  pricingAsset_in: [Bytes!]
  pricingAsset_not_in: [Bytes!]
  pricingAsset_contains: Bytes
  pricingAsset_not_contains: Bytes
  price: BigDecimal
  price_not: BigDecimal
  price_gt: BigDecimal
  price_lt: BigDecimal
  price_gte: BigDecimal
  price_lte: BigDecimal
  price_in: [BigDecimal!]
  price_not_in: [BigDecimal!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TokenPrice_filter]
  or: [TokenPrice_filter]
}

enum TokenPrice_orderBy {
  id
  poolId
  poolId__id
  poolId__address
  poolId__poolType
  poolId__poolTypeVersion
  poolId__factory
  poolId__strategyType
  poolId__oracleEnabled
  poolId__symbol
  poolId__name
  poolId__swapEnabled
  poolId__swapEnabledInternal
  poolId__swapEnabledCurationSignal
  poolId__swapFee
  poolId__owner
  poolId__isPaused
  poolId__totalWeight
  poolId__totalSwapVolume
  poolId__totalSwapFee
  poolId__totalLiquidity
  poolId__totalLiquiditySansBPT
  poolId__totalShares
  poolId__totalProtocolFee
  poolId__createTime
  poolId__swapsCount
  poolId__holdersCount
  poolId__tx
  poolId__amp
  poolId__principalToken
  poolId__baseToken
  poolId__expiryTime
  poolId__unitSeconds
  poolId__managementFee
  poolId__joinExitEnabled
  poolId__mustAllowlistLPs
  poolId__managementAumFee
  poolId__totalAumFeeCollectedInBPT
  poolId__mainIndex
  poolId__wrappedIndex
  poolId__lowerTarget
  poolId__upperTarget
  poolId__sqrtAlpha
  poolId__sqrtBeta
  poolId__root3Alpha
  poolId__c
  poolId__s
  poolId__tauAlphaX
  poolId__tauAlphaY
  poolId__tauBetaX
  poolId__tauBetaY
  poolId__u
  poolId__v
  poolId__w
  poolId__z
  poolId__dSq
  poolId__alpha
  poolId__beta
  poolId__lambda
  poolId__delta
  poolId__epsilon
  poolId__isInRecoveryMode
  poolId__protocolSwapFeeCache
  poolId__protocolYieldFeeCache
  poolId__protocolAumFeeCache
  poolId__totalProtocolFeePaidInBPT
  poolId__lastJoinExitAmp
  poolId__lastPostJoinExitInvariant
  poolId__protocolId
  asset
  amount
  pricingAsset
  price
  block
  timestamp
}

type TokenSnapshot {
  id: ID!
  token: Token!
  timestamp: Int!
  totalBalanceUSD: BigDecimal!
  totalBalanceNotional: BigDecimal!
  totalVolumeUSD: BigDecimal!
  totalVolumeNotional: BigDecimal!
  totalSwapCount: BigInt!
}

input TokenSnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  totalBalanceUSD: BigDecimal
  totalBalanceUSD_not: BigDecimal
  totalBalanceUSD_gt: BigDecimal
  totalBalanceUSD_lt: BigDecimal
  totalBalanceUSD_gte: BigDecimal
  totalBalanceUSD_lte: BigDecimal
  totalBalanceUSD_in: [BigDecimal!]
  totalBalanceUSD_not_in: [BigDecimal!]
  totalBalanceNotional: BigDecimal
  totalBalanceNotional_not: BigDecimal
  totalBalanceNotional_gt: BigDecimal
  totalBalanceNotional_lt: BigDecimal
  totalBalanceNotional_gte: BigDecimal
  totalBalanceNotional_lte: BigDecimal
  totalBalanceNotional_in: [BigDecimal!]
  totalBalanceNotional_not_in: [BigDecimal!]
  totalVolumeUSD: BigDecimal
  totalVolumeUSD_not: BigDecimal
  totalVolumeUSD_gt: BigDecimal
  totalVolumeUSD_lt: BigDecimal
  totalVolumeUSD_gte: BigDecimal
  totalVolumeUSD_lte: BigDecimal
  totalVolumeUSD_in: [BigDecimal!]
  totalVolumeUSD_not_in: [BigDecimal!]
  totalVolumeNotional: BigDecimal
  totalVolumeNotional_not: BigDecimal
  totalVolumeNotional_gt: BigDecimal
  totalVolumeNotional_lt: BigDecimal
  totalVolumeNotional_gte: BigDecimal
  totalVolumeNotional_lte: BigDecimal
  totalVolumeNotional_in: [BigDecimal!]
  totalVolumeNotional_not_in: [BigDecimal!]
  totalSwapCount: BigInt
  totalSwapCount_not: BigInt
  totalSwapCount_gt: BigInt
  totalSwapCount_lt: BigInt
  totalSwapCount_gte: BigInt
  totalSwapCount_lte: BigInt
  totalSwapCount_in: [BigInt!]
  totalSwapCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TokenSnapshot_filter]
  or: [TokenSnapshot_filter]
}

enum TokenSnapshot_orderBy {
  id
  token
  token__id
  token__symbol
  token__name
  token__decimals
  token__address
  token__totalBalanceUSD
  token__totalBalanceNotional
  token__totalVolumeUSD
  token__totalVolumeNotional
  token__totalSwapCount
  token__latestUSDPrice
  token__latestUSDPriceTimestamp
  token__latestFXPrice
  token__fxOracleDecimals
  timestamp
  totalBalanceUSD
  totalBalanceNotional
  totalVolumeUSD
  totalVolumeNotional
  totalSwapCount
}

input Token_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  decimals: Int
  decimals_not: Int
  decimals_gt: Int
  decimals_lt: Int
  decimals_gte: Int
  decimals_lte: Int
  decimals_in: [Int!]
  decimals_not_in: [Int!]
  address: String
  address_not: String
  address_gt: String
  address_lt: String
  address_gte: String
  address_lte: String
  address_in: [String!]
  address_not_in: [String!]
  address_contains: String
  address_contains_nocase: String
  address_not_contains: String
  address_not_contains_nocase: String
  address_starts_with: String
  address_starts_with_nocase: String
  address_not_starts_with: String
  address_not_starts_with_nocase: String
  address_ends_with: String
  address_ends_with_nocase: String
  address_not_ends_with: String
  address_not_ends_with_nocase: String
  totalBalanceUSD: BigDecimal
  totalBalanceUSD_not: BigDecimal
  totalBalanceUSD_gt: BigDecimal
  totalBalanceUSD_lt: BigDecimal
  totalBalanceUSD_gte: BigDecimal
  totalBalanceUSD_lte: BigDecimal
  totalBalanceUSD_in: [BigDecimal!]
  totalBalanceUSD_not_in: [BigDecimal!]
  totalBalanceNotional: BigDecimal
  totalBalanceNotional_not: BigDecimal
  totalBalanceNotional_gt: BigDecimal
  totalBalanceNotional_lt: BigDecimal
  totalBalanceNotional_gte: BigDecimal
  totalBalanceNotional_lte: BigDecimal
  totalBalanceNotional_in: [BigDecimal!]
  totalBalanceNotional_not_in: [BigDecimal!]
  totalVolumeUSD: BigDecimal
  totalVolumeUSD_not: BigDecimal
  totalVolumeUSD_gt: BigDecimal
  totalVolumeUSD_lt: BigDecimal
  totalVolumeUSD_gte: BigDecimal
  totalVolumeUSD_lte: BigDecimal
  totalVolumeUSD_in: [BigDecimal!]
  totalVolumeUSD_not_in: [BigDecimal!]
  totalVolumeNotional: BigDecimal
  totalVolumeNotional_not: BigDecimal
  totalVolumeNotional_gt: BigDecimal
  totalVolumeNotional_lt: BigDecimal
  totalVolumeNotional_gte: BigDecimal
  totalVolumeNotional_lte: BigDecimal
  totalVolumeNotional_in: [BigDecimal!]
  totalVolumeNotional_not_in: [BigDecimal!]
  totalSwapCount: BigInt
  totalSwapCount_not: BigInt
  totalSwapCount_gt: BigInt
  totalSwapCount_lt: BigInt
  totalSwapCount_gte: BigInt
  totalSwapCount_lte: BigInt
  totalSwapCount_in: [BigInt!]
  totalSwapCount_not_in: [BigInt!]
  latestPrice: String
  latestPrice_not: String
  latestPrice_gt: String
  latestPrice_lt: String
  latestPrice_gte: String
  latestPrice_lte: String
  latestPrice_in: [String!]
  latestPrice_not_in: [String!]
  latestPrice_contains: String
  latestPrice_contains_nocase: String
  latestPrice_not_contains: String
  latestPrice_not_contains_nocase: String
  latestPrice_starts_with: String
  latestPrice_starts_with_nocase: String
  latestPrice_not_starts_with: String
  latestPrice_not_starts_with_nocase: String
  latestPrice_ends_with: String
  latestPrice_ends_with_nocase: String
  latestPrice_not_ends_with: String
  latestPrice_not_ends_with_nocase: String
  latestPrice_: LatestPrice_filter
  latestUSDPrice: BigDecimal
  latestUSDPrice_not: BigDecimal
  latestUSDPrice_gt: BigDecimal
  latestUSDPrice_lt: BigDecimal
  latestUSDPrice_gte: BigDecimal
  latestUSDPrice_lte: BigDecimal
  latestUSDPrice_in: [BigDecimal!]
  latestUSDPrice_not_in: [BigDecimal!]
  latestUSDPriceTimestamp: BigInt
  latestUSDPriceTimestamp_not: BigInt
  latestUSDPriceTimestamp_gt: BigInt
  latestUSDPriceTimestamp_lt: BigInt
  latestUSDPriceTimestamp_gte: BigInt
  latestUSDPriceTimestamp_lte: BigInt
  latestUSDPriceTimestamp_in: [BigInt!]
  latestUSDPriceTimestamp_not_in: [BigInt!]
  latestFXPrice: BigDecimal
  latestFXPrice_not: BigDecimal
  latestFXPrice_gt: BigDecimal
  latestFXPrice_lt: BigDecimal
  latestFXPrice_gte: BigDecimal
  latestFXPrice_lte: BigDecimal
  latestFXPrice_in: [BigDecimal!]
  latestFXPrice_not_in: [BigDecimal!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  fxOracleDecimals: Int
  fxOracleDecimals_not: Int
  fxOracleDecimals_gt: Int
  fxOracleDecimals_lt: Int
  fxOracleDecimals_gte: Int
  fxOracleDecimals_lte: Int
  fxOracleDecimals_in: [Int!]
  fxOracleDecimals_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Token_filter]
  or: [Token_filter]
}

enum Token_orderBy {
  id
  symbol
  name
  decimals
  address
  totalBalanceUSD
  totalBalanceNotional
  totalVolumeUSD
  totalVolumeNotional
  totalSwapCount
  latestPrice
  latestPrice__id
  latestPrice__asset
  latestPrice__pricingAsset
  latestPrice__price
  latestPrice__block
  latestUSDPrice
  latestUSDPriceTimestamp
  latestFXPrice
  pool
  pool__id
  pool__address
  pool__poolType
  pool__poolTypeVersion
  pool__factory
  pool__strategyType
  pool__oracleEnabled
  pool__symbol
  pool__name
  pool__swapEnabled
  pool__swapEnabledInternal
  pool__swapEnabledCurationSignal
  pool__swapFee
  pool__owner
  pool__isPaused
  pool__totalWeight
  pool__totalSwapVolume
  pool__totalSwapFee
  pool__totalLiquidity
  pool__totalLiquiditySansBPT
  pool__totalShares
  pool__totalProtocolFee
  pool__createTime
  pool__swapsCount
  pool__holdersCount
  pool__tx
  pool__amp
  pool__principalToken
  pool__baseToken
  pool__expiryTime
  pool__unitSeconds
  pool__managementFee
  pool__joinExitEnabled
  pool__mustAllowlistLPs
  pool__managementAumFee
  pool__totalAumFeeCollectedInBPT
  pool__mainIndex
  pool__wrappedIndex
  pool__lowerTarget
  pool__upperTarget
  pool__sqrtAlpha
  pool__sqrtBeta
  pool__root3Alpha
  pool__c
  pool__s
  pool__tauAlphaX
  pool__tauAlphaY
  pool__tauBetaX
  pool__tauBetaY
  pool__u
  pool__v
  pool__w
  pool__z
  pool__dSq
  pool__alpha
  pool__beta
  pool__lambda
  pool__delta
  pool__epsilon
  pool__isInRecoveryMode
  pool__protocolSwapFeeCache
  pool__protocolYieldFeeCache
  pool__protocolAumFeeCache
  pool__totalProtocolFeePaidInBPT
  pool__lastJoinExitAmp
  pool__lastPostJoinExitInvariant
  pool__protocolId
  fxOracleDecimals
}

type TradePair {
  """Token Address - Token Address"""
  id: ID!
  token0: Token!
  token1: Token!
  totalSwapVolume: BigDecimal!
  totalSwapFee: BigDecimal!
}

type TradePairSnapshot {
  id: ID!
  pair: TradePair!
  timestamp: Int!
  totalSwapVolume: BigDecimal!
  totalSwapFee: BigDecimal!
}

input TradePairSnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  pair_: TradePair_filter
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  totalSwapVolume: BigDecimal
  totalSwapVolume_not: BigDecimal
  totalSwapVolume_gt: BigDecimal
  totalSwapVolume_lt: BigDecimal
  totalSwapVolume_gte: BigDecimal
  totalSwapVolume_lte: BigDecimal
  totalSwapVolume_in: [BigDecimal!]
  totalSwapVolume_not_in: [BigDecimal!]
  totalSwapFee: BigDecimal
  totalSwapFee_not: BigDecimal
  totalSwapFee_gt: BigDecimal
  totalSwapFee_lt: BigDecimal
  totalSwapFee_gte: BigDecimal
  totalSwapFee_lte: BigDecimal
  totalSwapFee_in: [BigDecimal!]
  totalSwapFee_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TradePairSnapshot_filter]
  or: [TradePairSnapshot_filter]
}

enum TradePairSnapshot_orderBy {
  id
  pair
  pair__id
  pair__totalSwapVolume
  pair__totalSwapFee
  timestamp
  totalSwapVolume
  totalSwapFee
}

input TradePair_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token0_: Token_filter
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  token1_: Token_filter
  totalSwapVolume: BigDecimal
  totalSwapVolume_not: BigDecimal
  totalSwapVolume_gt: BigDecimal
  totalSwapVolume_lt: BigDecimal
  totalSwapVolume_gte: BigDecimal
  totalSwapVolume_lte: BigDecimal
  totalSwapVolume_in: [BigDecimal!]
  totalSwapVolume_not_in: [BigDecimal!]
  totalSwapFee: BigDecimal
  totalSwapFee_not: BigDecimal
  totalSwapFee_gt: BigDecimal
  totalSwapFee_lt: BigDecimal
  totalSwapFee_gte: BigDecimal
  totalSwapFee_lte: BigDecimal
  totalSwapFee_in: [BigDecimal!]
  totalSwapFee_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TradePair_filter]
  or: [TradePair_filter]
}

enum TradePair_orderBy {
  id
  token0
  token0__id
  token0__symbol
  token0__name
  token0__decimals
  token0__address
  token0__totalBalanceUSD
  token0__totalBalanceNotional
  token0__totalVolumeUSD
  token0__totalVolumeNotional
  token0__totalSwapCount
  token0__latestUSDPrice
  token0__latestUSDPriceTimestamp
  token0__latestFXPrice
  token0__fxOracleDecimals
  token1
  token1__id
  token1__symbol
  token1__name
  token1__decimals
  token1__address
  token1__totalBalanceUSD
  token1__totalBalanceNotional
  token1__totalVolumeUSD
  token1__totalVolumeNotional
  token1__totalSwapCount
  token1__latestUSDPrice
  token1__latestUSDPriceTimestamp
  token1__latestFXPrice
  token1__fxOracleDecimals
  totalSwapVolume
  totalSwapFee
}

type User {
  id: ID!
  sharesOwned(skip: Int = 0, first: Int = 100, orderBy: PoolShare_orderBy, orderDirection: OrderDirection, where: PoolShare_filter): [PoolShare!]
  swaps(skip: Int = 0, first: Int = 100, orderBy: Swap_orderBy, orderDirection: OrderDirection, where: Swap_filter): [Swap!]
  userInternalBalances(skip: Int = 0, first: Int = 100, orderBy: UserInternalBalance_orderBy, orderDirection: OrderDirection, where: UserInternalBalance_filter): [UserInternalBalance!]
}

type UserInternalBalance {
  id: ID!
  userAddress: User
  token: Bytes!
  tokenInfo: Token
  balance: BigDecimal!
}

input UserInternalBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  userAddress: String
  userAddress_not: String
  userAddress_gt: String
  userAddress_lt: String
  userAddress_gte: String
  userAddress_lte: String
  userAddress_in: [String!]
  userAddress_not_in: [String!]
  userAddress_contains: String
  userAddress_contains_nocase: String
  userAddress_not_contains: String
  userAddress_not_contains_nocase: String
  userAddress_starts_with: String
  userAddress_starts_with_nocase: String
  userAddress_not_starts_with: String
  userAddress_not_starts_with_nocase: String
  userAddress_ends_with: String
  userAddress_ends_with_nocase: String
  userAddress_not_ends_with: String
  userAddress_not_ends_with_nocase: String
  userAddress_: User_filter
  token: Bytes
  token_not: Bytes
  token_gt: Bytes
  token_lt: Bytes
  token_gte: Bytes
  token_lte: Bytes
  token_in: [Bytes!]
  token_not_in: [Bytes!]
  token_contains: Bytes
  token_not_contains: Bytes
  tokenInfo: String
  tokenInfo_not: String
  tokenInfo_gt: String
  tokenInfo_lt: String
  tokenInfo_gte: String
  tokenInfo_lte: String
  tokenInfo_in: [String!]
  tokenInfo_not_in: [String!]
  tokenInfo_contains: String
  tokenInfo_contains_nocase: String
  tokenInfo_not_contains: String
  tokenInfo_not_contains_nocase: String
  tokenInfo_starts_with: String
  tokenInfo_starts_with_nocase: String
  tokenInfo_not_starts_with: String
  tokenInfo_not_starts_with_nocase: String
  tokenInfo_ends_with: String
  tokenInfo_ends_with_nocase: String
  tokenInfo_not_ends_with: String
  tokenInfo_not_ends_with_nocase: String
  tokenInfo_: Token_filter
  balance: BigDecimal
  balance_not: BigDecimal
  balance_gt: BigDecimal
  balance_lt: BigDecimal
  balance_gte: BigDecimal
  balance_lte: BigDecimal
  balance_in: [BigDecimal!]
  balance_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [UserInternalBalance_filter]
  or: [UserInternalBalance_filter]
}

enum UserInternalBalance_orderBy {
  id
  userAddress
  userAddress__id
  token
  tokenInfo
  tokenInfo__id
  tokenInfo__symbol
  tokenInfo__name
  tokenInfo__decimals
  tokenInfo__address
  tokenInfo__totalBalanceUSD
  tokenInfo__totalBalanceNotional
  tokenInfo__totalVolumeUSD
  tokenInfo__totalVolumeNotional
  tokenInfo__totalSwapCount
  tokenInfo__latestUSDPrice
  tokenInfo__latestUSDPriceTimestamp
  tokenInfo__latestFXPrice
  tokenInfo__fxOracleDecimals
  balance
}

input User_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  sharesOwned_: PoolShare_filter
  swaps_: Swap_filter
  userInternalBalances_: UserInternalBalance_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [User_filter]
  or: [User_filter]
}

enum User_orderBy {
  id
  sharesOwned
  swaps
  userInternalBalances
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
  """The hash of the parent block"""
  parentHash: Bytes
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}